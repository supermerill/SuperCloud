
//#define CATCH_CONFIG_DISABLE

#include <catch_main.hpp> // main is in test_connection
//#include <catch2/catch.hpp>
//#include <cryptopp/dll.h>
#include "IdentityManager.hpp"
#include <cryptopp/osrng.h>
#include <cryptopp/rsa.h>


namespace supercloud::testcrypto {

    SCENARIO("testing CryptoPP::Integer conversions") {


        CryptoPP::Integer i(42);


        ByteBuff buff;
        putCryptoPPInteger(buff, i);

        CryptoPP::Integer i2 = getCryptoPPInteger(buff.rewind());

        REQUIRE(i.ConvertToLong() == 42);
        REQUIRE(i == i2);

        ByteBuff buff2;
        putCryptoPPInteger(buff2, i2);

        REQUIRE(buff.rewind() == buff2.rewind());
    }

    SCENARIO("testing createNewPublicKey()") {

        GIVEN("RSA") {
            IdentityManager mana{ 10 };
            mana.createNewPublicKey(IdentityManager::EncryptionType::RSA);

            REQUIRE(mana.m_public_key.type == IdentityManager::EncryptionType::RSA);
            REQUIRE(!mana.m_public_key.raw_data.empty());
            REQUIRE(!mana.m_private_key.empty());
            REQUIRE(mana.m_private_key != mana.m_public_key.raw_data);

        }
        GIVEN("NAIVE") {
            IdentityManager mana{ 10 };
            mana.createNewPublicKey(IdentityManager::EncryptionType::NAIVE);

            REQUIRE(mana.m_public_key.type == IdentityManager::EncryptionType::NAIVE);
            REQUIRE(!mana.m_public_key.raw_data.empty());
            REQUIRE(!mana.m_private_key.empty());
            REQUIRE(mana.m_private_key == mana.m_public_key.raw_data);
        }

        GIVEN("RSA test") {

            CryptoPP::InvertibleRSAFunction params;
            CryptoPP::AutoSeededRandomPool rand;
            params.GenerateRandomWithKeySize(rand, 128);

            ///////////////////////////////////////
            // Create Keys
            CryptoPP::RSA::PrivateKey private_key = CryptoPP::RSA::PrivateKey(params);
            CryptoPP::RSA::PublicKey public_key(params);

            //validation
            REQUIRE(private_key.Validate(rand, 3));

            REQUIRE(public_key.Validate(rand, 3));

            REQUIRE(private_key.GetModulus() == public_key.GetModulus());
            REQUIRE(private_key.GetPublicExponent() == public_key.GetPublicExponent());

            //save
            PrivateKey priv;
            PublicKey pub;
            putCryptoppPrivateKey(private_key, priv);
            putCryptoppPublicKey(public_key, pub);

            CryptoPP::RSA::PublicKey public_key_2 = getCryptoppPublicKey(pub);
            CryptoPP::RSA::PrivateKey private_key_2 = getCryptoppPrivateKey(priv);

            REQUIRE(public_key.GetModulus() == public_key_2.GetModulus());
            REQUIRE(public_key.GetPublicExponent() == public_key_2.GetPublicExponent());
            REQUIRE(private_key.GetModulus() == private_key_2.GetModulus());
            REQUIRE(private_key.GetPublicExponent() == private_key_2.GetPublicExponent());
            REQUIRE(private_key.GetPrivateExponent() == private_key_2.GetPrivateExponent());

            PrivateKey priv2;
            PublicKey pub2;
            putCryptoppPrivateKey(private_key_2, priv2);
            putCryptoppPublicKey(public_key_2, pub2);

            REQUIRE(pub2 == pub);
            REQUIRE(priv == priv2);
        }

    }

    SCENARIO("testing encrypt -> decrypt") {

        IdentityManager mana{ 1 };
        mana.createNewPublicKey(IdentityManager::EncryptionType::RSA);

        IdentityManager mana2{ 2 };
        mana2.createNewPublicKey(IdentityManager::EncryptionType::RSA);

        mana.m_peer_2_peerdata[mana2.m_myself].rsa_public_key = mana2.m_public_key;
        mana2.m_peer_2_peerdata[mana.m_myself].rsa_public_key = mana.m_public_key;

        uint64_t test_msg = rand_u8() | (rand_u8() << 8) | (rand_u8() << 16) | (rand_u8() << 24);
        std::stringstream stream;
        stream << std::hex << test_msg;
        std::string str_input = stream.str();
        ByteBuff buff_in;
        buff_in.putUTF8(str_input).flip();
        std::vector<uint8_t> data_in = buff_in.getAll();

        std::vector<uint8_t> data = data_in;
        mana.encrypt(data, mana2.m_public_key);

        mana2.decrypt(data, mana.m_public_key);

        REQUIRE(data == data_in);

        ByteBuff buff_out;
        buff_out.put(data).flip();
        std::string str_output = buff_out.getUTF8();

        REQUIRE(str_output == str_input);

    }


    SCENARIO("testing encrypt -> decrypt (naive)") {

        IdentityManager mana{ 1 };
        mana.createNewPublicKey(IdentityManager::EncryptionType::NAIVE);

        IdentityManager mana2{ 2 };
        mana2.createNewPublicKey(IdentityManager::EncryptionType::NAIVE);

        mana.m_peer_2_peerdata[mana2.m_myself].rsa_public_key = mana2.m_public_key;
        mana2.m_peer_2_peerdata[mana.m_myself].rsa_public_key = mana.m_public_key;

        uint64_t test_msg = rand_u8() | (rand_u8() << 8) | (rand_u8() << 16) | (rand_u8() << 24);
        std::stringstream stream;
        stream << std::hex << test_msg;
        std::string str_input = stream.str();
        ByteBuff buff_in;
        buff_in.putUTF8(str_input).flip();
        std::vector<uint8_t> data_in = buff_in.getAll();

        std::vector<uint8_t> data = data_in;
        mana.encrypt(data, mana2.m_public_key);

        mana2.decrypt(data, mana.m_public_key);

        REQUIRE(data == data_in);

        ByteBuff buff_out;
        buff_out.put(data).flip();
        std::string str_output = buff_out.getUTF8();

        REQUIRE(str_output == str_input);

    }
    typedef std::vector<uint8_t> VecB;

    SCENARIO("test rsa error") {
        CryptoPP::AutoSeededRandomPool rand;

        //Error, message:
        std::vector<uint8_t> clear_msg = { 0ui8,176ui8,0ui8,215ui8,16ui8,53ui8,101ui8,98ui8,53ui8,49ui8,97ui8,53ui8,51ui8,57ui8,53ui8,97ui8,55ui8,51ui8,49ui8,50ui8,101ui8,12ui8,112ui8,97ui8,115ui8,115ui8,99ui8,108ui8,117ui8,115ui8,116ui8,101ui8,114ui8,49ui8 };
        //signed with this private key: 
        PrivateKey priv = { 129ui8,128ui8,173ui8,78ui8,181ui8,158ui8,227ui8,232ui8,65ui8,58ui8,182ui8,193ui8,180ui8,22ui8,6ui8,67ui8,195ui8,14ui8,138ui8,11ui8,183ui8,156ui8,33ui8,181ui8,62ui8,130ui8,247ui8,207ui8,17ui8,45ui8,44ui8,244ui8,153ui8,178ui8,141ui8,161ui8,207ui8,192ui8,219ui8,95ui8,131ui8,214ui8,185ui8,102ui8,1ui8,115ui8,58ui8,11ui8,177ui8,204ui8,190ui8,151ui8,42ui8,107ui8,117ui8,113ui8,12ui8,146ui8,248ui8,251ui8,241ui8,166ui8,185ui8,80ui8,121ui8,149ui8,169ui8,224ui8,46ui8,176ui8,168ui8,203ui8,183ui8,188ui8,220ui8,128ui8,108ui8,213ui8,217ui8,106ui8,60ui8,52ui8,59ui8,185ui8,77ui8,215ui8,243ui8,217ui8,207ui8,207ui8,155ui8,12ui8,144ui8,190ui8,253ui8,185ui8,27ui8,250ui8,5ui8,164ui8,13ui8,33ui8,182ui8,177ui8,83ui8,91ui8,178ui8,244ui8,253ui8,131ui8,104ui8,141ui8,157ui8,212ui8,21ui8,170ui8,22ui8,194ui8,21ui8,255ui8,44ui8,82ui8,184ui8,83ui8,245ui8,15ui8,229ui8,235ui8,32ui8,167ui8,226ui8,54ui8,104ui8,107ui8,222ui8,16ui8,75ui8,186ui8,65ui8,75ui8,79ui8,121ui8,252ui8,250ui8,132ui8,110ui8,107ui8,21ui8,86ui8,35ui8,114ui8,248ui8,101ui8,183ui8,59ui8,35ui8,133ui8,73ui8,30ui8,187ui8,125ui8,15ui8,40ui8,71ui8,130ui8,38ui8,176ui8,16ui8,106ui8,159ui8,178ui8,14ui8,227ui8,46ui8,143ui8,8ui8,150ui8,143ui8,212ui8,38ui8,195ui8,108ui8,63ui8,54ui8,73ui8,237ui8,54ui8,231ui8,95ui8,160ui8,100ui8,226ui8,208ui8,81ui8,241ui8,233ui8,46ui8,168ui8,142ui8,18ui8,30ui8,187ui8,5ui8,135ui8,194ui8,163ui8,56ui8,248ui8,79ui8,208ui8,1ui8,113ui8,43ui8,27ui8,247ui8,159ui8,101ui8,243ui8,200ui8,108ui8,199ui8,205ui8,197ui8,104ui8,177ui8,71ui8,54ui8,137ui8,107ui8,204ui8,4ui8,193ui8,94ui8,6ui8,217ui8,218ui8,232ui8,207ui8,171ui8,200ui8,201ui8,111ui8,187ui8,95ui8,107ui8,149ui8,78ui8,145ui8,31ui8,108ui8,180ui8,208ui8,211ui8,130ui8,145ui8,186ui8,183ui8,120ui8,13ui8,52ui8,137ui8,159ui8,30ui8,174ui8,0ui8,7ui8,153ui8,38ui8,133ui8,21ui8,140ui8,60ui8,126ui8,190ui8,20ui8,243ui8,106ui8,54ui8,115ui8,26ui8,171ui8,15ui8,111ui8,69ui8,80ui8,226ui8,118ui8,120ui8,2ui8,73ui8,142ui8,171ui8,30ui8,5ui8,136ui8,133ui8,154ui8,74ui8,246ui8,216ui8,124ui8,192ui8,155ui8,233ui8,59ui8,133ui8,17ui8,249ui8,219ui8,103ui8,107ui8,95ui8,65ui8,8ui8,244ui8,40ui8,234ui8,12ui8,12ui8,80ui8,248ui8,89ui8,213ui8,63ui8,33ui8,50ui8,234ui8,52ui8,236ui8,191ui8,60ui8,58ui8,237ui8,249ui8,6ui8,218ui8,254ui8,79ui8,136ui8,147ui8,180ui8,58ui8,63ui8,72ui8,24ui8,191ui8,117ui8,30ui8,216ui8,152ui8,127ui8,160ui8,148ui8,25ui8,0ui8,21ui8,127ui8,125ui8,186ui8,23ui8,37ui8,38ui8,99ui8,210ui8,26ui8,173ui8,113ui8,47ui8,166ui8,181ui8,92ui8,156ui8,80ui8,217ui8,138ui8,141ui8,64ui8,80ui8,104ui8,36ui8,135ui8,84ui8,250ui8,216ui8,223ui8,171ui8,1ui8,17ui8,129ui8,128ui8,56ui8,17ui8,239ui8,119ui8,43ui8,157ui8,246ui8,252ui8,104ui8,77ui8,186ui8,67ui8,92ui8,97ui8,55ui8,147ui8,195ui8,64ui8,6ui8,178ui8,131ui8,96ui8,72ui8,238ui8,34ui8,255ui8,58ui8,67ui8,82ui8,79ui8,34ui8,170ui8,181ui8,89ui8,255ui8,115ui8,25ui8,204ui8,20ui8,16ui8,195ui8,130ui8,226ui8,89ui8,252ui8,48ui8,245ui8,194ui8,61ui8,169ui8,96ui8,140ui8,45ui8,134ui8,117ui8,2ui8,95ui8,156ui8,206ui8,46ui8,105ui8,33ui8,144ui8,191ui8,122ui8,185ui8,120ui8,132ui8,114ui8,216ui8,127ui8,53ui8,146ui8,162ui8,5ui8,24ui8,2ui8,147ui8,79ui8,182ui8,139ui8,203ui8,2ui8,152ui8,176ui8,198ui8,119ui8,240ui8,87ui8,207ui8,92ui8,1ui8,142ui8,82ui8,121ui8,254ui8,16ui8,226ui8,64ui8,123ui8,217ui8,57ui8,94ui8,187ui8,200ui8,244ui8,232ui8,155ui8,116ui8,166ui8,73ui8,166ui8,127ui8,122ui8,203ui8,32ui8,172ui8,195ui8,127ui8,71ui8,240ui8,87ui8,101ui8,223ui8,127ui8,23ui8,93ui8,99ui8,125ui8,228ui8,109ui8,19ui8,214ui8,231ui8,39ui8,143ui8,21ui8,31ui8,229ui8,1ui8,209ui8,216ui8,148ui8,65ui8,215ui8,89ui8,185ui8,252ui8,104ui8,246ui8,2ui8,202ui8,86ui8,229ui8,216ui8,76ui8,92ui8,196ui8,47ui8,253ui8,95ui8,218ui8,230ui8,87ui8,207ui8,140ui8,215ui8,51ui8,170ui8,140ui8,88ui8,143ui8,16ui8,40ui8,108ui8,242ui8,76ui8,42ui8,168ui8,163ui8,5ui8,100ui8,99ui8,54ui8,40ui8,89ui8,234ui8,59ui8,107ui8,239ui8,7ui8,41ui8,9ui8,38ui8,9ui8,59ui8,114ui8,100ui8,218ui8,241ui8,244ui8,110ui8,188ui8,209ui8,88ui8,109ui8,217ui8,241ui8,188ui8,225ui8,244ui8,11ui8,102ui8,14ui8,219ui8,226ui8,19ui8,78ui8,4ui8,97ui8,6ui8,155ui8,101ui8,24ui8,199ui8,112ui8,128ui8,168ui8,112ui8,228ui8,77ui8,164ui8,101ui8,1ui8,141ui8,186ui8,201ui8,136ui8,31ui8,120ui8,166ui8,107ui8,116ui8,251ui8,7ui8,30ui8,47ui8,65ui8,108ui8,178ui8,148ui8,189ui8,132ui8,12ui8,34ui8,195ui8,48ui8,39ui8,207ui8,129ui8,223ui8,117ui8,160ui8,39ui8,25ui8,98ui8,231ui8,36ui8,112ui8,91ui8,43ui8,133ui8,250ui8,255ui8,36ui8,119ui8,182ui8,236ui8,59ui8,249ui8,97ui8,221ui8,254ui8,90ui8,22ui8,231ui8,246ui8,120ui8,13ui8,58ui8,147ui8,159ui8,98ui8,130ui8,80ui8,242ui8,13ui8,209ui8,190ui8,149ui8,226ui8,107ui8,206ui8,222ui8,162ui8,150ui8,78ui8,193ui8,244ui8,124ui8,125ui8,217ui8,115ui8,49ui8,83ui8,127ui8,145ui8,35ui8,53ui8,5ui8,230ui8,214ui8,23ui8,47ui8,136ui8,68ui8,87ui8,230ui8,3ui8,249ui8,126ui8,198ui8,100ui8,206ui8,91ui8,25ui8,151ui8,225ui8,205ui8,248ui8,6ui8,66ui8,222ui8,250ui8,140ui8,170ui8,64ui8,245ui8,9ui8,168ui8,229ui8,133ui8,81ui8,180ui8,56ui8,18ui8,106ui8,60ui8,8ui8,235ui8,16ui8,130ui8,182ui8,44ui8,93ui8,52ui8,181ui8,124ui8,182ui8,53ui8,8ui8,189ui8,79ui8,147ui8,103ui8,168ui8,217ui8,55ui8,139ui8,133ui8,219ui8,32ui8,184ui8,189ui8,128ui8,192ui8,191ui8,241ui8,182ui8,141ui8,13ui8,186ui8,94ui8,48ui8,141ui8,176ui8,65ui8,99ui8,12ui8,205ui8,200ui8,100ui8,70ui8,210ui8,239ui8,163ui8,108ui8,77ui8,216ui8,203ui8,10ui8,94ui8,129ui8,4ui8,244ui8,178ui8,76ui8,166ui8,65ui8,243ui8,204ui8,92ui8,170ui8,24ui8,185ui8,150ui8,154ui8,246ui8,24ui8,94ui8,141ui8,65ui8,110ui8,192ui8,107ui8,31ui8,250ui8,199ui8,226ui8,249ui8,250ui8,238ui8,7ui8,174ui8,24ui8,215ui8,82ui8,239ui8,229ui8,240ui8,77ui8,45ui8,155ui8,111ui8,183ui8,203ui8,89ui8,238ui8,24ui8,185ui8,46ui8,33ui8,112ui8,116ui8,191ui8,12ui8,88ui8,36ui8,10ui8,131ui8,146ui8,246ui8,33ui8,89ui8,211ui8,85ui8,232ui8,230ui8,4ui8,244ui8,18ui8,68ui8,135ui8,74ui8,100ui8,138ui8,81ui8,180ui8,123ui8,98ui8,138ui8,26ui8,146ui8,132ui8,84ui8,68ui8,56ui8,139ui8,76ui8,126ui8,129ui8,157ui8,189ui8,5ui8,145ui8,202ui8,146ui8,72ui8,209ui8,15ui8,0ui8,138ui8,119ui8,145ui8,199ui8,105ui8,43ui8,174ui8,192ui8,106ui8,43ui8,191ui8,4ui8,252ui8,138ui8,30ui8,165ui8,236ui8,127ui8,211ui8,14ui8,64ui8,139ui8,201ui8,71ui8,31ui8,222ui8,114ui8,206ui8,211ui8,57ui8,73ui8,101ui8,53ui8,64ui8,200ui8,34ui8,225ui8,213ui8,147ui8,10ui8,164ui8,196ui8,31ui8,201ui8,107ui8,31ui8,103ui8,186ui8,22ui8,9ui8,75ui8,148ui8,53ui8,0ui8,130ui8,143ui8,12ui8,148ui8,203ui8,69ui8,70ui8,71ui8,39ui8,167ui8,55ui8,120ui8,183ui8,128ui8,192ui8,231ui8,36ui8,207ui8,239ui8,100ui8,148ui8,97ui8,158ui8,155ui8,152ui8,127ui8,115ui8,73ui8,98ui8,159ui8,244ui8,231ui8,41ui8,166ui8,62ui8,10ui8,12ui8,89ui8,226ui8,83ui8,215ui8,80ui8,133ui8,165ui8,4ui8,160ui8,130ui8,233ui8,57ui8,227ui8,56ui8,44ui8,68ui8,17ui8,139ui8,99ui8,200ui8,189ui8,71ui8,12ui8,180ui8,16ui8,174ui8,194ui8,57ui8,30ui8,127ui8,178ui8,174ui8,53ui8,87ui8,93ui8,41ui8,76ui8,4ui8,96ui8,211ui8,218ui8,114ui8,66ui8,116ui8,155ui8,88ui8,40ui8,142ui8,89ui8,253ui8,189ui8,152ui8,187ui8,15ui8,29ui8,150ui8,173ui8,135ui8,250ui8,210ui8,6ui8,64ui8,217ui8,74ui8,91ui8,248ui8,155ui8,251ui8,109ui8,20ui8,135ui8,206ui8,60ui8,6ui8,82ui8,218ui8,55ui8,2ui8,239ui8,15ui8,199ui8,159ui8,42ui8,193ui8,64ui8,15ui8,232ui8,227ui8,108ui8,73ui8,160ui8,100ui8,241ui8,253ui8,209ui8,240ui8,42ui8,65ui8,44ui8,94ui8,232ui8,91ui8,121ui8,182ui8,197ui8,158ui8,138ui8,40ui8,243ui8,171ui8,109ui8,84ui8,154ui8,10ui8,182ui8,152ui8,80ui8,93ui8,227ui8,135ui8,240ui8,138ui8,118ui8,83ui8,101ui8,253ui8,252ui8,19ui8,183ui8,163ui8,80ui8,154ui8,121ui8,112ui8,252ui8,143ui8,211ui8,180ui8,201ui8,99ui8,182ui8,201ui8,9ui8,254ui8,162ui8,141ui8,33ui8,141ui8,37ui8,72ui8,57ui8,235ui8,15ui8,92ui8,172ui8,125ui8,146ui8,106ui8,238ui8,68ui8,176ui8,239ui8,154ui8,190ui8,51ui8,213ui8,104ui8,130ui8,20ui8,173ui8,128ui8,192ui8,101ui8,158ui8,21ui8,89ui8,187ui8,249ui8,64ui8,236ui8,135ui8,63ui8,49ui8,172ui8,232ui8,169ui8,45ui8,218ui8,188ui8,21ui8,81ui8,176ui8,222ui8,252ui8,9ui8,92ui8,110ui8,230ui8,188ui8,198ui8,99ui8,109ui8,115ui8,223ui8,140ui8,83ui8,228ui8,169ui8,135ui8,58ui8,68ui8,34ui8,142ui8,70ui8,12ui8,230ui8,195ui8,64ui8,194ui8,41ui8,162ui8,31ui8,253ui8,60ui8,165ui8,87ui8,42ui8,126ui8,4ui8,16ui8,223ui8,249ui8,134ui8,66ui8,197ui8,6ui8,191ui8,114ui8,127ui8,119ui8,97ui8,77ui8,137ui8,246ui8,133ui8,143ui8,54ui8,138ui8,44ui8,122ui8,10ui8,202ui8,76ui8,199ui8,201ui8,84ui8,183ui8,55ui8,2ui8,152ui8,247ui8,105ui8,183ui8,136ui8,213ui8,114ui8,39ui8,201ui8,237ui8,69ui8,128ui8,133ui8,118ui8,140ui8,185ui8,202ui8,193ui8,149ui8,152ui8,220ui8,165ui8,21ui8,14ui8,224ui8,85ui8,172ui8,98ui8,188ui8,235ui8,153ui8,137ui8,107ui8,62ui8,98ui8,201ui8,7ui8,241ui8,58ui8,63ui8,77ui8,45ui8,85ui8,203ui8,212ui8,252ui8,116ui8,113ui8,131ui8,62ui8,224ui8,12ui8,227ui8,12ui8,140ui8,67ui8,171ui8,248ui8,124ui8,134ui8,61ui8,97ui8,227ui8,178ui8,0ui8,139ui8,157ui8,0ui8,53ui8,234ui8,73ui8,94ui8,136ui8,18ui8,119ui8,143ui8,47ui8,186ui8,87ui8,58ui8,167ui8,106ui8,162ui8,31ui8,175ui8,98ui8,132ui8,35ui8,9ui8,229ui8,13ui8,0ui8,69ui8,30ui8,142ui8,48ui8,167ui8,217ui8,97ui8,112ui8,246ui8,224ui8,14ui8,78ui8,247ui8,128ui8,192ui8,81ui8,148ui8,133ui8,159ui8,201ui8,37ui8,79ui8,161ui8,100ui8,23ui8,180ui8,131ui8,10ui8,215ui8,131ui8,191ui8,217ui8,29ui8,194ui8,52ui8,3ui8,139ui8,227ui8,125ui8,14ui8,136ui8,58ui8,137ui8,133ui8,137ui8,41ui8,151ui8,157ui8,155ui8,245ui8,215ui8,151ui8,39ui8,21ui8,64ui8,65ui8,85ui8,232ui8,115ui8,109ui8,229ui8,51ui8,16ui8,128ui8,200ui8,221ui8,150ui8,123ui8,76ui8,139ui8,76ui8,2ui8,195ui8,72ui8,1ui8,139ui8,150ui8,16ui8,221ui8,8ui8,101ui8,100ui8,0ui8,255ui8,65ui8,76ui8,240ui8,36ui8,204ui8,126ui8,65ui8,145ui8,248ui8,241ui8,243ui8,193ui8,239ui8,197ui8,248ui8,197ui8,41ui8,77ui8,163ui8,9ui8,224ui8,68ui8,157ui8,213ui8,148ui8,21ui8,47ui8,104ui8,137ui8,64ui8,151ui8,159ui8,171ui8,55ui8,101ui8,90ui8,98ui8,82ui8,216ui8,112ui8,80ui8,68ui8,86ui8,56ui8,156ui8,25ui8,44ui8,104ui8,54ui8,165ui8,128ui8,106ui8,3ui8,97ui8,17ui8,58ui8,4ui8,69ui8,191ui8,124ui8,14ui8,116ui8,30ui8,98ui8,210ui8,144ui8,184ui8,124ui8,174ui8,58ui8,123ui8,125ui8,123ui8,69ui8,214ui8,132ui8,29ui8,111ui8,74ui8,149ui8,52ui8,34ui8,178ui8,28ui8,114ui8,193ui8,115ui8,43ui8,246ui8,134ui8,244ui8,131ui8,80ui8,94ui8,161ui8,78ui8,210ui8,87ui8,125ui8,26ui8,230ui8,133ui8,161ui8,5ui8,98ui8,5ui8,108ui8,0ui8,164ui8,202ui8,67ui8,219ui8,159ui8,197ui8,250ui8,54ui8,157ui8,123ui8,180ui8,187ui8,121ui8,52ui8,121ui8,128ui8,192ui8,114ui8,53ui8,54ui8,66ui8,201ui8,206ui8,160ui8,83ui8,220ui8,219ui8,18ui8,216ui8,86ui8,5ui8,47ui8,29ui8,80ui8,136ui8,46ui8,245ui8,60ui8,31ui8,180ui8,234ui8,151ui8,38ui8,18ui8,52ui8,179ui8,151ui8,64ui8,189ui8,47ui8,169ui8,23ui8,165ui8,169ui8,113ui8,84ui8,237ui8,2ui8,142ui8,220ui8,51ui8,218ui8,169ui8,194ui8,226ui8,234ui8,163ui8,7ui8,63ui8,17ui8,146ui8,180ui8,8ui8,22ui8,8ui8,56ui8,16ui8,46ui8,100ui8,166ui8,153ui8,5ui8,156ui8,131ui8,181ui8,147ui8,13ui8,151ui8,194ui8,133ui8,223ui8,172ui8,94ui8,219ui8,202ui8,142ui8,81ui8,107ui8,33ui8,54ui8,248ui8,179ui8,229ui8,240ui8,177ui8,226ui8,244ui8,38ui8,6ui8,182ui8,29ui8,66ui8,66ui8,63ui8,71ui8,226ui8,76ui8,220ui8,151ui8,237ui8,230ui8,77ui8,184ui8,122ui8,76ui8,227ui8,41ui8,144ui8,249ui8,209ui8,224ui8,119ui8,36ui8,209ui8,15ui8,40ui8,122ui8,177ui8,8ui8,136ui8,255ui8,64ui8,149ui8,137ui8,47ui8,134ui8,219ui8,123ui8,243ui8,90ui8,112ui8,214ui8,62ui8,74ui8,215ui8,37ui8,200ui8,205ui8,117ui8,246ui8,37ui8,149ui8,29ui8,204ui8,104ui8,232ui8,49ui8,199ui8,33ui8,29ui8,180ui8,145ui8,243ui8,222ui8,132ui8,204ui8,113ui8,19ui8,239ui8,57ui8,245ui8,26ui8,217ui8,1ui8,217ui8,30ui8,236ui8,142ui8,43ui8,73ui8,149ui8,177ui8,198ui8,226ui8,212ui8,247ui8,240ui8,8ui8,164ui8,45ui8,154ui8,170ui8,45ui8,28ui8,42ui8,96ui8,106ui8,45ui8,98ui8 };
        //to create this signed message : 
        std::vector<uint8_t> signed_msg = { 157ui8,91ui8,148ui8,138ui8,200ui8,129ui8,156ui8,99ui8,208ui8,250ui8,206ui8,255ui8,162ui8,142ui8,98ui8,164ui8,49ui8,176ui8,102ui8,244ui8,43ui8,158ui8,131ui8,149ui8,233ui8,75ui8,214ui8,162ui8,32ui8,14ui8,1ui8,164ui8,118ui8,199ui8,201ui8,38ui8,191ui8,124ui8,17ui8,199ui8,108ui8,208ui8,180ui8,169ui8,105ui8,59ui8,21ui8,195ui8,185ui8,167ui8,53ui8,247ui8,59ui8,30ui8,154ui8,114ui8,149ui8,239ui8,234ui8,139ui8,0ui8,214ui8,142ui8,75ui8,169ui8,110ui8,223ui8,215ui8,122ui8,24ui8,191ui8,59ui8,169ui8,66ui8,106ui8,8ui8,172ui8,8ui8,227ui8,189ui8,187ui8,15ui8,159ui8,145ui8,191ui8,181ui8,252ui8,152ui8,147ui8,75ui8,159ui8,211ui8,208ui8,127ui8,95ui8,52ui8,158ui8,220ui8,45ui8,230ui8,123ui8,121ui8,199ui8,56ui8,216ui8,253ui8,107ui8,115ui8,80ui8,199ui8,115ui8,238ui8,254ui8,50ui8,23ui8,136ui8,79ui8,24ui8,37ui8,149ui8,222ui8,208ui8,76ui8,255ui8,89ui8,63ui8,254ui8,24ui8,37ui8,41ui8,77ui8,184ui8,105ui8,67ui8,123ui8,77ui8,107ui8,107ui8,188ui8,207ui8,182ui8,91ui8,207ui8,198ui8,217ui8,57ui8,124ui8,19ui8,30ui8,197ui8,193ui8,59ui8,219ui8,144ui8,88ui8,55ui8,7ui8,134ui8,80ui8,11ui8,35ui8,222ui8,224ui8,80ui8,132ui8,76ui8,117ui8,68ui8,80ui8,26ui8,191ui8,246ui8,113ui8,199ui8,230ui8,94ui8,207ui8,17ui8,176ui8,59ui8,126ui8,234ui8,235ui8,57ui8,52ui8,151ui8,137ui8,249ui8,165ui8,215ui8,50ui8,241ui8,57ui8,19ui8,156ui8,192ui8,59ui8,56ui8,207ui8,241ui8,182ui8,91ui8,167ui8,147ui8,54ui8,79ui8,93ui8,76ui8,162ui8,128ui8,113ui8,52ui8,102ui8,212ui8,234ui8,223ui8,121ui8,144ui8,205ui8,115ui8,223ui8,145ui8,244ui8,187ui8,182ui8,1ui8,59ui8,11ui8,66ui8,150ui8,61ui8,137ui8,1ui8,135ui8,241ui8,100ui8,241ui8,39ui8,153ui8,67ui8,95ui8,158ui8,108ui8,48ui8,104ui8,157ui8,12ui8,53ui8,42ui8,176ui8,251ui8,13ui8,64ui8,236ui8,152ui8,58ui8,245ui8,130ui8,237ui8,199ui8,50ui8,73ui8,238ui8,38ui8,30ui8,186ui8,209ui8,153ui8,44ui8,127ui8,206ui8,189ui8,79ui8,16ui8,64ui8,235ui8,164ui8,168ui8,226ui8,185ui8,124ui8,142ui8,152ui8,97ui8,197ui8,200ui8,230ui8,78ui8,83ui8,218ui8,85ui8,129ui8,12ui8,67ui8,22ui8,123ui8,198ui8,196ui8,119ui8,111ui8,174ui8,235ui8,161ui8,177ui8,110ui8,210ui8,153ui8,7ui8,165ui8,37ui8,171ui8,89ui8,103ui8,216ui8,1ui8,246ui8,188ui8,239ui8,107ui8,79ui8,44ui8,115ui8,105ui8,163ui8,189ui8,227ui8,142ui8,180ui8,239ui8,92ui8,73ui8,203ui8,102ui8,183ui8,216ui8,200ui8,135ui8,184ui8,145ui8,73ui8,65ui8,136ui8,25ui8,50ui8,65ui8,92ui8,57ui8,115ui8,184ui8,166ui8,59ui8,210ui8,28ui8,139ui8,226ui8,208ui8,184ui8,192ui8,44ui8,84ui8,111ui8,84ui8,171ui8,82ui8,207ui8,33ui8,108ui8,90ui8,143ui8,234ui8,55ui8,42ui8,230ui8,250ui8,41ui8,194ui8,217ui8,110ui8,182ui8,180ui8,65ui8,23ui8,58ui8,95ui8 };
        //and then encoded with this public key: 
        PublicKey pub = { 129ui8,128ui8,151ui8,83ui8,116ui8,53ui8,188ui8,238ui8,222ui8,0ui8,22ui8,95ui8,241ui8,128ui8,110ui8,49ui8,46ui8,201ui8,156ui8,121ui8,115ui8,145ui8,123ui8,45ui8,150ui8,210ui8,234ui8,215ui8,140ui8,19ui8,236ui8,105ui8,94ui8,130ui8,222ui8,206ui8,169ui8,158ui8,133ui8,104ui8,225ui8,45ui8,136ui8,164ui8,250ui8,204ui8,107ui8,252ui8,203ui8,4ui8,207ui8,84ui8,181ui8,34ui8,220ui8,27ui8,108ui8,228ui8,195ui8,37ui8,233ui8,82ui8,88ui8,134ui8,78ui8,158ui8,135ui8,135ui8,200ui8,178ui8,84ui8,108ui8,112ui8,146ui8,105ui8,245ui8,99ui8,82ui8,28ui8,46ui8,173ui8,201ui8,167ui8,32ui8,39ui8,58ui8,126ui8,106ui8,53ui8,231ui8,76ui8,46ui8,141ui8,83ui8,253ui8,62ui8,146ui8,108ui8,174ui8,74ui8,48ui8,222ui8,5ui8,114ui8,219ui8,118ui8,13ui8,25ui8,45ui8,153ui8,137ui8,138ui8,184ui8,141ui8,215ui8,104ui8,247ui8,122ui8,1ui8,117ui8,16ui8,242ui8,241ui8,71ui8,14ui8,30ui8,121ui8,163ui8,44ui8,215ui8,116ui8,127ui8,250ui8,28ui8,62ui8,107ui8,177ui8,170ui8,211ui8,135ui8,29ui8,12ui8,138ui8,114ui8,141ui8,146ui8,67ui8,86ui8,86ui8,165ui8,87ui8,75ui8,181ui8,183ui8,249ui8,72ui8,21ui8,240ui8,135ui8,47ui8,111ui8,17ui8,43ui8,57ui8,129ui8,20ui8,54ui8,236ui8,227ui8,154ui8,170ui8,134ui8,247ui8,139ui8,225ui8,214ui8,135ui8,29ui8,210ui8,205ui8,213ui8,134ui8,38ui8,126ui8,202ui8,206ui8,95ui8,240ui8,85ui8,96ui8,122ui8,65ui8,7ui8,119ui8,111ui8,29ui8,21ui8,225ui8,124ui8,123ui8,211ui8,97ui8,32ui8,249ui8,24ui8,15ui8,122ui8,122ui8,187ui8,13ui8,22ui8,220ui8,22ui8,209ui8,167ui8,244ui8,209ui8,254ui8,191ui8,191ui8,174ui8,68ui8,153ui8,40ui8,106ui8,176ui8,45ui8,104ui8,129ui8,138ui8,170ui8,219ui8,157ui8,253ui8,31ui8,127ui8,56ui8,179ui8,27ui8,128ui8,228ui8,252ui8,132ui8,94ui8,5ui8,194ui8,55ui8,4ui8,79ui8,199ui8,210ui8,99ui8,251ui8,1ui8,128ui8,247ui8,235ui8,186ui8,101ui8,92ui8,132ui8,235ui8,76ui8,67ui8,64ui8,19ui8,55ui8,182ui8,189ui8,187ui8,74ui8,174ui8,98ui8,83ui8,210ui8,75ui8,97ui8,254ui8,174ui8,169ui8,66ui8,252ui8,42ui8,40ui8,181ui8,131ui8,201ui8,1ui8,215ui8,42ui8,79ui8,239ui8,59ui8,131ui8,152ui8,233ui8,69ui8,96ui8,250ui8,156ui8,80ui8,225ui8,45ui8,106ui8,34ui8,195ui8,107ui8,231ui8,153ui8,222ui8,125ui8,190ui8,196ui8,25ui8,48ui8,21ui8,252ui8,71ui8,171ui8,213ui8,92ui8,210ui8,213ui8,229ui8,8ui8,73ui8,75ui8,244ui8,116ui8,18ui8,158ui8,176ui8,6ui8,151ui8,156ui8,24ui8,19ui8,11ui8,61ui8,10ui8,61ui8,31ui8,92ui8,0ui8,29ui8,73ui8,36ui8,33ui8,95ui8,28ui8,132ui8,122ui8,112ui8,4ui8,234ui8,42ui8,49ui8,163ui8,204ui8,73ui8,205ui8,87ui8,206ui8,147ui8,129ui8,79ui8,0ui8,79ui8,214ui8,241ui8,216ui8,181ui8,177ui8,218ui8,177ui8,39ui8,218ui8,128ui8,205ui8,134ui8,111ui8,4ui8,181ui8,8ui8,197ui8,145ui8,1ui8,17ui8 };
        //to have this ecrypted message : 
        std::vector<uint8_t> crypt_msg = { 80ui8,232ui8,139ui8,190ui8,200ui8,210ui8,52ui8,241ui8,104ui8,99ui8,117ui8,185ui8,145ui8,61ui8,29ui8,237ui8,147ui8,88ui8,79ui8,24ui8,237ui8,188ui8,223ui8,153ui8,243ui8,115ui8,212ui8,8ui8,43ui8,133ui8,18ui8,69ui8,65ui8,82ui8,118ui8,213ui8,75ui8,212ui8,57ui8,22ui8,140ui8,7ui8,203ui8,84ui8,219ui8,3ui8,135ui8,58ui8,31ui8,116ui8,20ui8,174ui8,216ui8,186ui8,99ui8,134ui8,86ui8,202ui8,117ui8,186ui8,14ui8,110ui8,202ui8,78ui8,53ui8,73ui8,74ui8,71ui8,205ui8,9ui8,64ui8,154ui8,33ui8,245ui8,73ui8,103ui8,141ui8,234ui8,89ui8,138ui8,225ui8,5ui8,75ui8,95ui8,12ui8,48ui8,32ui8,117ui8,69ui8,17ui8,134ui8,0ui8,185ui8,201ui8,125ui8,43ui8,248ui8,87ui8,230ui8,17ui8,163ui8,56ui8,92ui8,27ui8,132ui8,239ui8,28ui8,115ui8,138ui8,58ui8,10ui8,161ui8,229ui8,105ui8,193ui8,38ui8,88ui8,99ui8,85ui8,147ui8,113ui8,204ui8,225ui8,60ui8,63ui8,97ui8,239ui8,174ui8,120ui8,120ui8,242ui8,37ui8,34ui8,123ui8,123ui8,171ui8,51ui8,145ui8,86ui8,234ui8,131ui8,119ui8,98ui8,188ui8,250ui8,58ui8,4ui8,166ui8,194ui8,196ui8,18ui8,254ui8,5ui8,33ui8,128ui8,79ui8,20ui8,174ui8,43ui8,177ui8,224ui8,3ui8,66ui8,85ui8,208ui8,169ui8,69ui8,38ui8,62ui8,4ui8,189ui8,143ui8,49ui8,188ui8,143ui8,169ui8,145ui8,102ui8,143ui8,10ui8,14ui8,133ui8,163ui8,217ui8,14ui8,253ui8,50ui8,165ui8,5ui8,251ui8,121ui8,24ui8,98ui8,21ui8,5ui8,46ui8,166ui8,116ui8,45ui8,117ui8,88ui8,50ui8,225ui8,70ui8,168ui8,188ui8,23ui8,26ui8,117ui8,13ui8,171ui8,64ui8,140ui8,216ui8,173ui8,135ui8,40ui8,192ui8,84ui8,86ui8,151ui8,159ui8,121ui8,145ui8,57ui8,254ui8,245ui8,214ui8,223ui8,73ui8,139ui8,164ui8,130ui8,154ui8,9ui8,208ui8,192ui8,56ui8,24ui8,212ui8,169ui8,254ui8,151ui8,192ui8,74ui8,208ui8,106ui8,244ui8,141ui8,150ui8,108ui8,43ui8,153ui8,73ui8,128ui8,180ui8,62ui8,91ui8,13ui8,51ui8,5ui8,158ui8,114ui8,92ui8,81ui8,67ui8,219ui8,57ui8,4ui8,185ui8,39ui8,177ui8,61ui8,153ui8,119ui8,209ui8,105ui8,195ui8,61ui8,229ui8,135ui8,202ui8,246ui8,56ui8,179ui8,191ui8,231ui8,175ui8,222ui8,174ui8,178ui8,243ui8,44ui8,129ui8,189ui8,160ui8,244ui8,26ui8,16ui8,155ui8,134ui8,141ui8,130ui8,177ui8,171ui8,221ui8,28ui8,35ui8,171ui8,24ui8,141ui8,150ui8,48ui8,5ui8,68ui8,96ui8,9ui8,162ui8,128ui8,22ui8,226ui8,38ui8,80ui8,236ui8,167ui8,104ui8,107ui8,25ui8,41ui8,218ui8,131ui8,83ui8,138ui8,67ui8,201ui8,230ui8,198ui8,94ui8,99ui8,155ui8,25ui8,233ui8,195ui8,52ui8,50ui8,105ui8,193ui8,40ui8,173ui8,131ui8,214ui8,60ui8,15ui8,206ui8,156ui8,195ui8,229ui8,224ui8,145ui8,218ui8,199ui8,227ui8,57ui8,171ui8,141ui8,84ui8,42ui8,113ui8,246ui8,188ui8,142ui8,214ui8,101ui8,56ui8,130ui8,158ui8,202ui8,191ui8,214ui8,136ui8,19ui8,80ui8,170ui8,79ui8 };
        //that should be decrypted with this private key 
        PrivateKey deco_priv_key = { 129ui8,128ui8,151ui8,83ui8,116ui8,53ui8,188ui8,238ui8,222ui8,0ui8,22ui8,95ui8,241ui8,128ui8,110ui8,49ui8,46ui8,201ui8,156ui8,121ui8,115ui8,145ui8,123ui8,45ui8,150ui8,210ui8,234ui8,215ui8,140ui8,19ui8,236ui8,105ui8,94ui8,130ui8,222ui8,206ui8,169ui8,158ui8,133ui8,104ui8,225ui8,45ui8,136ui8,164ui8,250ui8,204ui8,107ui8,252ui8,203ui8,4ui8,207ui8,84ui8,181ui8,34ui8,220ui8,27ui8,108ui8,228ui8,195ui8,37ui8,233ui8,82ui8,88ui8,134ui8,78ui8,158ui8,135ui8,135ui8,200ui8,178ui8,84ui8,108ui8,112ui8,146ui8,105ui8,245ui8,99ui8,82ui8,28ui8,46ui8,173ui8,201ui8,167ui8,32ui8,39ui8,58ui8,126ui8,106ui8,53ui8,231ui8,76ui8,46ui8,141ui8,83ui8,253ui8,62ui8,146ui8,108ui8,174ui8,74ui8,48ui8,222ui8,5ui8,114ui8,219ui8,118ui8,13ui8,25ui8,45ui8,153ui8,137ui8,138ui8,184ui8,141ui8,215ui8,104ui8,247ui8,122ui8,1ui8,117ui8,16ui8,242ui8,241ui8,71ui8,14ui8,30ui8,121ui8,163ui8,44ui8,215ui8,116ui8,127ui8,250ui8,28ui8,62ui8,107ui8,177ui8,170ui8,211ui8,135ui8,29ui8,12ui8,138ui8,114ui8,141ui8,146ui8,67ui8,86ui8,86ui8,165ui8,87ui8,75ui8,181ui8,183ui8,249ui8,72ui8,21ui8,240ui8,135ui8,47ui8,111ui8,17ui8,43ui8,57ui8,129ui8,20ui8,54ui8,236ui8,227ui8,154ui8,170ui8,134ui8,247ui8,139ui8,225ui8,214ui8,135ui8,29ui8,210ui8,205ui8,213ui8,134ui8,38ui8,126ui8,202ui8,206ui8,95ui8,240ui8,85ui8,96ui8,122ui8,65ui8,7ui8,119ui8,111ui8,29ui8,21ui8,225ui8,124ui8,123ui8,211ui8,97ui8,32ui8,249ui8,24ui8,15ui8,122ui8,122ui8,187ui8,13ui8,22ui8,220ui8,22ui8,209ui8,167ui8,244ui8,209ui8,254ui8,191ui8,191ui8,174ui8,68ui8,153ui8,40ui8,106ui8,176ui8,45ui8,104ui8,129ui8,138ui8,170ui8,219ui8,157ui8,253ui8,31ui8,127ui8,56ui8,179ui8,27ui8,128ui8,228ui8,252ui8,132ui8,94ui8,5ui8,194ui8,55ui8,4ui8,79ui8,199ui8,210ui8,99ui8,251ui8,1ui8,128ui8,247ui8,235ui8,186ui8,101ui8,92ui8,132ui8,235ui8,76ui8,67ui8,64ui8,19ui8,55ui8,182ui8,189ui8,187ui8,74ui8,174ui8,98ui8,83ui8,210ui8,75ui8,97ui8,254ui8,174ui8,169ui8,66ui8,252ui8,42ui8,40ui8,181ui8,131ui8,201ui8,1ui8,215ui8,42ui8,79ui8,239ui8,59ui8,131ui8,152ui8,233ui8,69ui8,96ui8,250ui8,156ui8,80ui8,225ui8,45ui8,106ui8,34ui8,195ui8,107ui8,231ui8,153ui8,222ui8,125ui8,190ui8,196ui8,25ui8,48ui8,21ui8,252ui8,71ui8,171ui8,213ui8,92ui8,210ui8,213ui8,229ui8,8ui8,73ui8,75ui8,244ui8,116ui8,18ui8,158ui8,176ui8,6ui8,151ui8,156ui8,24ui8,19ui8,11ui8,61ui8,10ui8,61ui8,31ui8,92ui8,0ui8,29ui8,73ui8,36ui8,33ui8,95ui8,28ui8,132ui8,122ui8,112ui8,4ui8,234ui8,42ui8,49ui8,163ui8,204ui8,73ui8,205ui8,87ui8,206ui8,147ui8,129ui8,79ui8,0ui8,79ui8,214ui8,241ui8,216ui8,181ui8,177ui8,218ui8,177ui8,39ui8,218ui8,128ui8,205ui8,134ui8,111ui8,4ui8,181ui8,8ui8,197ui8,145ui8,1ui8,17ui8,129ui8,128ui8,2ui8,247ui8,152ui8,221ui8,234ui8,155ui8,69ui8,155ui8,156ui8,11ui8,235ui8,163ui8,37ui8,76ui8,66ui8,44ui8,28ui8,42ui8,137ui8,203ui8,163ui8,10ui8,238ui8,224ui8,255ui8,149ui8,203ui8,135ui8,235ui8,137ui8,152ui8,112ui8,255ui8,89ui8,98ui8,178ui8,203ui8,102ui8,114ui8,216ui8,188ui8,103ui8,160ui8,134ui8,132ui8,160ui8,144ui8,135ui8,159ui8,172ui8,83ui8,221ui8,139ui8,216ui8,97ui8,129ui8,249ui8,201ui8,135ui8,21ui8,177ui8,108ui8,11ui8,148ui8,173ui8,82ui8,249ui8,229ui8,97ui8,7ui8,37ui8,88ui8,52ui8,70ui8,17ui8,1ui8,156ui8,41ui8,18ui8,119ui8,103ui8,171ui8,76ui8,16ui8,52ui8,172ui8,191ui8,205ui8,81ui8,206ui8,183ui8,122ui8,30ui8,16ui8,73ui8,37ui8,68ui8,172ui8,31ui8,19ui8,105ui8,132ui8,195ui8,12ui8,90ui8,156ui8,25ui8,253ui8,253ui8,173ui8,98ui8,253ui8,194ui8,248ui8,4ui8,218ui8,60ui8,67ui8,140ui8,225ui8,160ui8,86ui8,186ui8,0ui8,152ui8,249ui8,41ui8,9ui8,62ui8,133ui8,4ui8,231ui8,116ui8,172ui8,199ui8,63ui8,149ui8,183ui8,90ui8,236ui8,42ui8,223ui8,27ui8,223ui8,187ui8,11ui8,187ui8,108ui8,167ui8,91ui8,214ui8,98ui8,250ui8,217ui8,65ui8,175ui8,98ui8,5ui8,243ui8,30ui8,116ui8,76ui8,107ui8,241ui8,86ui8,105ui8,9ui8,123ui8,128ui8,213ui8,120ui8,78ui8,9ui8,114ui8,163ui8,70ui8,219ui8,249ui8,255ui8,42ui8,201ui8,138ui8,3ui8,250ui8,1ui8,225ui8,147ui8,62ui8,32ui8,131ui8,200ui8,238ui8,59ui8,177ui8,157ui8,98ui8,200ui8,184ui8,43ui8,37ui8,140ui8,253ui8,76ui8,97ui8,219ui8,105ui8,166ui8,89ui8,40ui8,80ui8,250ui8,64ui8,72ui8,78ui8,20ui8,137ui8,35ui8,157ui8,190ui8,207ui8,176ui8,140ui8,82ui8,203ui8,49ui8,88ui8,49ui8,215ui8,93ui8,202ui8,42ui8,97ui8,251ui8,180ui8,217ui8,182ui8,40ui8,115ui8,30ui8,9ui8,51ui8,118ui8,6ui8,95ui8,98ui8,27ui8,185ui8,188ui8,142ui8,130ui8,163ui8,136ui8,159ui8,185ui8,71ui8,164ui8,226ui8,77ui8,42ui8,53ui8,234ui8,159ui8,230ui8,99ui8,97ui8,39ui8,219ui8,90ui8,113ui8,183ui8,241ui8,203ui8,234ui8,180ui8,148ui8,42ui8,214ui8,5ui8,167ui8,221ui8,123ui8,12ui8,89ui8,58ui8,53ui8,25ui8,64ui8,86ui8,210ui8,239ui8,94ui8,199ui8,56ui8,148ui8,232ui8,228ui8,245ui8,166ui8,106ui8,56ui8,54ui8,117ui8,59ui8,120ui8,47ui8,154ui8,239ui8,8ui8,132ui8,253ui8,196ui8,167ui8,29ui8,91ui8,77ui8,150ui8,215ui8,243ui8,186ui8,48ui8,11ui8,84ui8,144ui8,8ui8,196ui8,4ui8,58ui8,162ui8,5ui8,158ui8,51ui8,135ui8,179ui8,188ui8,6ui8,47ui8,186ui8,240ui8,119ui8,141ui8,61ui8,148ui8,136ui8,26ui8,159ui8,154ui8,174ui8,103ui8,162ui8,148ui8,49ui8,251ui8,15ui8,84ui8,127ui8,117ui8,182ui8,99ui8,2ui8,160ui8,141ui8,160ui8,86ui8,240ui8,161ui8,67ui8,7ui8,193ui8,149ui8,95ui8,116ui8,200ui8,63ui8,246ui8,173ui8,29ui8,225ui8,243ui8,57ui8,65ui8,65ui8,100ui8,185ui8,193ui8,128ui8,192ui8,182ui8,193ui8,226ui8,119ui8,244ui8,249ui8,177ui8,196ui8,198ui8,178ui8,29ui8,9ui8,89ui8,159ui8,199ui8,45ui8,247ui8,149ui8,65ui8,13ui8,137ui8,160ui8,172ui8,80ui8,174ui8,133ui8,99ui8,157ui8,94ui8,224ui8,148ui8,166ui8,39ui8,214ui8,33ui8,9ui8,58ui8,100ui8,110ui8,10ui8,90ui8,228ui8,126ui8,23ui8,219ui8,91ui8,159ui8,159ui8,66ui8,128ui8,138ui8,147ui8,22ui8,163ui8,247ui8,226ui8,48ui8,82ui8,79ui8,184ui8,137ui8,25ui8,152ui8,92ui8,140ui8,189ui8,85ui8,81ui8,139ui8,85ui8,7ui8,253ui8,203ui8,137ui8,77ui8,194ui8,153ui8,191ui8,160ui8,170ui8,249ui8,164ui8,114ui8,32ui8,2ui8,178ui8,174ui8,177ui8,197ui8,12ui8,243ui8,122ui8,214ui8,29ui8,41ui8,240ui8,23ui8,58ui8,11ui8,181ui8,214ui8,84ui8,252ui8,40ui8,204ui8,11ui8,246ui8,199ui8,219ui8,5ui8,250ui8,161ui8,225ui8,207ui8,236ui8,132ui8,227ui8,236ui8,56ui8,198ui8,231ui8,210ui8,224ui8,157ui8,127ui8,40ui8,50ui8,59ui8,66ui8,120ui8,91ui8,64ui8,176ui8,122ui8,244ui8,244ui8,50ui8,249ui8,94ui8,252ui8,140ui8,135ui8,206ui8,110ui8,173ui8,101ui8,0ui8,82ui8,155ui8,28ui8,154ui8,198ui8,77ui8,113ui8,62ui8,162ui8,167ui8,4ui8,184ui8,155ui8,117ui8,52ui8,217ui8,57ui8,117ui8,52ui8,82ui8,191ui8,43ui8,113ui8,22ui8,185ui8,197ui8,35ui8,27ui8,83ui8,113ui8,225ui8,30ui8,165ui8,227ui8,252ui8,101ui8,57ui8,148ui8,243ui8,71ui8,117ui8,172ui8,1ui8,151ui8,61ui8,128ui8,192ui8,211ui8,248ui8,216ui8,187ui8,138ui8,209ui8,137ui8,33ui8,67ui8,208ui8,195ui8,135ui8,106ui8,206ui8,208ui8,28ui8,23ui8,36ui8,250ui8,245ui8,182ui8,198ui8,14ui8,91ui8,248ui8,205ui8,71ui8,71ui8,14ui8,83ui8,87ui8,143ui8,49ui8,0ui8,114ui8,153ui8,193ui8,48ui8,190ui8,109ui8,159ui8,147ui8,91ui8,81ui8,49ui8,54ui8,73ui8,136ui8,1ui8,90ui8,54ui8,46ui8,148ui8,218ui8,87ui8,85ui8,62ui8,11ui8,23ui8,17ui8,37ui8,245ui8,13ui8,132ui8,195ui8,63ui8,198ui8,220ui8,3ui8,19ui8,82ui8,73ui8,17ui8,60ui8,188ui8,244ui8,9ui8,73ui8,150ui8,9ui8,22ui8,173ui8,107ui8,86ui8,8ui8,214ui8,35ui8,42ui8,225ui8,165ui8,251ui8,112ui8,94ui8,220ui8,219ui8,238ui8,51ui8,5ui8,78ui8,29ui8,124ui8,233ui8,227ui8,155ui8,62ui8,105ui8,48ui8,230ui8,121ui8,9ui8,79ui8,48ui8,14ui8,58ui8,14ui8,167ui8,27ui8,68ui8,94ui8,7ui8,111ui8,18ui8,166ui8,157ui8,39ui8,31ui8,19ui8,5ui8,81ui8,147ui8,251ui8,73ui8,142ui8,161ui8,208ui8,215ui8,77ui8,50ui8,99ui8,146ui8,65ui8,27ui8,9ui8,26ui8,81ui8,189ui8,107ui8,169ui8,124ui8,76ui8,101ui8,53ui8,10ui8,223ui8,97ui8,212ui8,121ui8,239ui8,194ui8,101ui8,103ui8,31ui8,243ui8,247ui8,1ui8,91ui8,244ui8,156ui8,108ui8,49ui8,24ui8,165ui8,26ui8,210ui8,48ui8,13ui8,164ui8,208ui8,79ui8,80ui8,15ui8,6ui8,248ui8,83ui8,53ui8,30ui8,191ui8,143ui8,1ui8,246ui8,44ui8,229ui8,128ui8,192ui8,21ui8,128ui8,56ui8,194ui8,209ui8,134ui8,201ui8,158ui8,173ui8,246ui8,214ui8,61ui8,85ui8,214ui8,143ui8,231ui8,74ui8,77ui8,203ui8,107ui8,1ui8,33ui8,246ui8,39ui8,156ui8,15ui8,177ui8,93ui8,206ui8,237ui8,62ui8,170ui8,34ui8,205ui8,229ui8,196ui8,217ui8,177ui8,118ui8,91ui8,146ui8,56ui8,255ui8,198ui8,146ui8,71ui8,3ui8,184ui8,98ui8,45ui8,61ui8,122ui8,183ui8,94ui8,149ui8,162ui8,35ui8,205ui8,114ui8,202ui8,106ui8,123ui8,123ui8,86ui8,46ui8,172ui8,220ui8,220ui8,106ui8,190ui8,181ui8,165ui8,99ui8,61ui8,84ui8,113ui8,63ui8,67ui8,184ui8,140ui8,149ui8,215ui8,28ui8,124ui8,60ui8,141ui8,125ui8,246ui8,203ui8,227ui8,103ui8,240ui8,85ui8,108ui8,215ui8,193ui8,228ui8,157ui8,106ui8,202ui8,25ui8,55ui8,44ui8,185ui8,129ui8,106ui8,209ui8,189ui8,40ui8,211ui8,134ui8,229ui8,222ui8,84ui8,178ui8,105ui8,252ui8,178ui8,97ui8,8ui8,87ui8,130ui8,56ui8,138ui8,255ui8,230ui8,156ui8,127ui8,113ui8,59ui8,86ui8,7ui8,156ui8,74ui8,179ui8,104ui8,5ui8,255ui8,56ui8,89ui8,242ui8,106ui8,84ui8,133ui8,125ui8,207ui8,165ui8,175ui8,93ui8,138ui8,229ui8,8ui8,69ui8,88ui8,157ui8,245ui8,4ui8,151ui8,36ui8,198ui8,254ui8,186ui8,236ui8,97ui8,28ui8,216ui8,250ui8,173ui8,20ui8,43ui8,108ui8,21ui8,218ui8,245ui8,18ui8,70ui8,13ui8,101ui8,199ui8,94ui8,207ui8,135ui8,26ui8,247ui8,183ui8,43ui8,174ui8,13ui8,216ui8,0ui8,47ui8,233ui8,128ui8,192ui8,174ui8,144ui8,178ui8,124ui8,84ui8,52ui8,22ui8,147ui8,221ui8,126ui8,191ui8,36ui8,57ui8,215ui8,126ui8,53ui8,64ui8,60ui8,146ui8,111ui8,255ui8,238ui8,102ui8,45ui8,159ui8,184ui8,28ui8,148ui8,222ui8,158ui8,252ui8,208ui8,70ui8,120ui8,214ui8,216ui8,249ui8,115ui8,111ui8,165ui8,146ui8,121ui8,90ui8,66ui8,221ui8,59ui8,196ui8,21ui8,166ui8,194ui8,195ui8,53ui8,107ui8,134ui8,162ui8,70ui8,51ui8,24ui8,49ui8,29ui8,46ui8,81ui8,86ui8,109ui8,85ui8,127ui8,208ui8,241ui8,107ui8,241ui8,203ui8,75ui8,59ui8,95ui8,50ui8,50ui8,98ui8,0ui8,93ui8,112ui8,229ui8,127ui8,193ui8,206ui8,97ui8,161ui8,74ui8,35ui8,80ui8,106ui8,146ui8,213ui8,2ui8,212ui8,0ui8,105ui8,207ui8,170ui8,4ui8,24ui8,72ui8,192ui8,157ui8,82ui8,171ui8,222ui8,40ui8,69ui8,84ui8,158ui8,65ui8,54ui8,162ui8,77ui8,237ui8,243ui8,7ui8,101ui8,122ui8,156ui8,181ui8,211ui8,31ui8,204ui8,182ui8,206ui8,75ui8,230ui8,67ui8,46ui8,146ui8,181ui8,12ui8,12ui8,202ui8,26ui8,184ui8,11ui8,97ui8,15ui8,8ui8,112ui8,158ui8,21ui8,172ui8,186ui8,28ui8,109ui8,117ui8,108ui8,23ui8,28ui8,159ui8,138ui8,201ui8,9ui8,85ui8,92ui8,9ui8,128ui8,175ui8,71ui8,125ui8,158ui8,61ui8,90ui8,201ui8,113ui8,194ui8,130ui8,201ui8,0ui8,112ui8,112ui8,220ui8,71ui8,120ui8,171ui8,140ui8,156ui8,72ui8,156ui8,84ui8,8ui8,73ui8,221ui8,22ui8,57ui8,137ui8,37ui8,21ui8,233ui8,128ui8,192ui8,68ui8,74ui8,191ui8,162ui8,94ui8,104ui8,222ui8,220ui8,113ui8,47ui8,200ui8,47ui8,175ui8,1ui8,90ui8,38ui8,73ui8,83ui8,31ui8,240ui8,132ui8,69ui8,75ui8,2ui8,31ui8,160ui8,118ui8,201ui8,76ui8,156ui8,229ui8,23ui8,152ui8,15ui8,11ui8,216ui8,61ui8,197ui8,26ui8,67ui8,48ui8,68ui8,210ui8,117ui8,182ui8,46ui8,34ui8,31ui8,108ui8,57ui8,226ui8,179ui8,241ui8,16ui8,62ui8,191ui8,53ui8,53ui8,211ui8,105ui8,199ui8,52ui8,189ui8,233ui8,98ui8,184ui8,248ui8,58ui8,93ui8,223ui8,107ui8,13ui8,56ui8,217ui8,112ui8,102ui8,1ui8,168ui8,140ui8,162ui8,125ui8,18ui8,6ui8,86ui8,152ui8,245ui8,212ui8,169ui8,170ui8,34ui8,180ui8,215ui8,151ui8,44ui8,160ui8,88ui8,78ui8,92ui8,203ui8,192ui8,166ui8,216ui8,36ui8,181ui8,146ui8,76ui8,210ui8,57ui8,75ui8,181ui8,182ui8,141ui8,146ui8,239ui8,74ui8,103ui8,16ui8,62ui8,59ui8,243ui8,145ui8,106ui8,214ui8,79ui8,29ui8,147ui8,103ui8,162ui8,130ui8,245ui8,82ui8,6ui8,170ui8,186ui8,133ui8,29ui8,152ui8,131ui8,160ui8,213ui8,58ui8,245ui8,103ui8,245ui8,100ui8,85ui8,142ui8,29ui8,215ui8,26ui8,65ui8,176ui8,9ui8,1ui8,137ui8,181ui8,247ui8,240ui8,72ui8,5ui8,27ui8,140ui8,159ui8,243ui8,147ui8,148ui8,188ui8,59ui8,165ui8,125ui8,208ui8,42ui8,137ui8,46ui8,174ui8,124ui8,53ui8,127ui8,36ui8,155ui8,225ui8,66ui8,152ui8,37ui8,113ui8,80ui8,83ui8,211ui8,222ui8,214ui8,225ui8,60ui8 };
        //and unsigned with this pub key 
        PublicKey deco_pub_key = { 129ui8,128ui8,173ui8,78ui8,181ui8,158ui8,227ui8,232ui8,65ui8,58ui8,182ui8,193ui8,180ui8,22ui8,6ui8,67ui8,195ui8,14ui8,138ui8,11ui8,183ui8,156ui8,33ui8,181ui8,62ui8,130ui8,247ui8,207ui8,17ui8,45ui8,44ui8,244ui8,153ui8,178ui8,141ui8,161ui8,207ui8,192ui8,219ui8,95ui8,131ui8,214ui8,185ui8,102ui8,1ui8,115ui8,58ui8,11ui8,177ui8,204ui8,190ui8,151ui8,42ui8,107ui8,117ui8,113ui8,12ui8,146ui8,248ui8,251ui8,241ui8,166ui8,185ui8,80ui8,121ui8,149ui8,169ui8,224ui8,46ui8,176ui8,168ui8,203ui8,183ui8,188ui8,220ui8,128ui8,108ui8,213ui8,217ui8,106ui8,60ui8,52ui8,59ui8,185ui8,77ui8,215ui8,243ui8,217ui8,207ui8,207ui8,155ui8,12ui8,144ui8,190ui8,253ui8,185ui8,27ui8,250ui8,5ui8,164ui8,13ui8,33ui8,182ui8,177ui8,83ui8,91ui8,178ui8,244ui8,253ui8,131ui8,104ui8,141ui8,157ui8,212ui8,21ui8,170ui8,22ui8,194ui8,21ui8,255ui8,44ui8,82ui8,184ui8,83ui8,245ui8,15ui8,229ui8,235ui8,32ui8,167ui8,226ui8,54ui8,104ui8,107ui8,222ui8,16ui8,75ui8,186ui8,65ui8,75ui8,79ui8,121ui8,252ui8,250ui8,132ui8,110ui8,107ui8,21ui8,86ui8,35ui8,114ui8,248ui8,101ui8,183ui8,59ui8,35ui8,133ui8,73ui8,30ui8,187ui8,125ui8,15ui8,40ui8,71ui8,130ui8,38ui8,176ui8,16ui8,106ui8,159ui8,178ui8,14ui8,227ui8,46ui8,143ui8,8ui8,150ui8,143ui8,212ui8,38ui8,195ui8,108ui8,63ui8,54ui8,73ui8,237ui8,54ui8,231ui8,95ui8,160ui8,100ui8,226ui8,208ui8,81ui8,241ui8,233ui8,46ui8,168ui8,142ui8,18ui8,30ui8,187ui8,5ui8,135ui8,194ui8,163ui8,56ui8,248ui8,79ui8,208ui8,1ui8,113ui8,43ui8,27ui8,247ui8,159ui8,101ui8,243ui8,200ui8,108ui8,199ui8,205ui8,197ui8,104ui8,177ui8,71ui8,54ui8,137ui8,107ui8,204ui8,4ui8,193ui8,94ui8,6ui8,217ui8,218ui8,232ui8,207ui8,171ui8,200ui8,201ui8,111ui8,187ui8,95ui8,107ui8,149ui8,78ui8,145ui8,31ui8,108ui8,180ui8,208ui8,211ui8,130ui8,145ui8,186ui8,183ui8,120ui8,13ui8,52ui8,137ui8,159ui8,30ui8,174ui8,0ui8,7ui8,153ui8,38ui8,133ui8,21ui8,140ui8,60ui8,126ui8,190ui8,20ui8,243ui8,106ui8,54ui8,115ui8,26ui8,171ui8,15ui8,111ui8,69ui8,80ui8,226ui8,118ui8,120ui8,2ui8,73ui8,142ui8,171ui8,30ui8,5ui8,136ui8,133ui8,154ui8,74ui8,246ui8,216ui8,124ui8,192ui8,155ui8,233ui8,59ui8,133ui8,17ui8,249ui8,219ui8,103ui8,107ui8,95ui8,65ui8,8ui8,244ui8,40ui8,234ui8,12ui8,12ui8,80ui8,248ui8,89ui8,213ui8,63ui8,33ui8,50ui8,234ui8,52ui8,236ui8,191ui8,60ui8,58ui8,237ui8,249ui8,6ui8,218ui8,254ui8,79ui8,136ui8,147ui8,180ui8,58ui8,63ui8,72ui8,24ui8,191ui8,117ui8,30ui8,216ui8,152ui8,127ui8,160ui8,148ui8,25ui8,0ui8,21ui8,127ui8,125ui8,186ui8,23ui8,37ui8,38ui8,99ui8,210ui8,26ui8,173ui8,113ui8,47ui8,166ui8,181ui8,92ui8,156ui8,80ui8,217ui8,138ui8,141ui8,64ui8,80ui8,104ui8,36ui8,135ui8,84ui8,250ui8,216ui8,223ui8,171ui8,1ui8,17ui8 };

        //recreate pub/priv couples
        CryptoPP::RSA::PublicKey public_key_1 = getCryptoppPublicKey(deco_pub_key);
        CryptoPP::RSA::PrivateKey private_key_1 = getCryptoppPrivateKey(priv);


        REQUIRE(private_key_1.GetModulus() == public_key_1.GetModulus());
        REQUIRE(private_key_1.GetPublicExponent() == public_key_1.GetPublicExponent());
        REQUIRE(private_key_1.Validate(rand, 3));
        REQUIRE(public_key_1.Validate(rand, 3));
        CryptoPP::RSA::PrivateKey private_key_1_bis;
        CryptoPP::RSA::PublicKey public_key_1_bis;
        {
            std::vector<uint8_t> vec_n{ 173ui8,78ui8,181ui8,158ui8,227ui8,232ui8,65ui8,58ui8,182ui8,193ui8,180ui8,22ui8,6ui8,67ui8,195ui8,14ui8,138ui8,11ui8,183ui8,156ui8,33ui8,181ui8,62ui8,130ui8,247ui8,207ui8,17ui8,45ui8,44ui8,244ui8,153ui8,178ui8,141ui8,161ui8,207ui8,192ui8,219ui8,95ui8,131ui8,214ui8,185ui8,102ui8,1ui8,115ui8,58ui8,11ui8,177ui8,204ui8,190ui8,151ui8,42ui8,107ui8,117ui8,113ui8,12ui8,146ui8,248ui8,251ui8,241ui8,166ui8,185ui8,80ui8,121ui8,149ui8,169ui8,224ui8,46ui8,176ui8,168ui8,203ui8,183ui8,188ui8,220ui8,128ui8,108ui8,213ui8,217ui8,106ui8,60ui8,52ui8,59ui8,185ui8,77ui8,215ui8,243ui8,217ui8,207ui8,207ui8,155ui8,12ui8,144ui8,190ui8,253ui8,185ui8,27ui8,250ui8,5ui8,164ui8,13ui8,33ui8,182ui8,177ui8,83ui8,91ui8,178ui8,244ui8,253ui8,131ui8,104ui8,141ui8,157ui8,212ui8,21ui8,170ui8,22ui8,194ui8,21ui8,255ui8,44ui8,82ui8,184ui8,83ui8,245ui8,15ui8,229ui8,235ui8,32ui8,167ui8,226ui8,54ui8,104ui8,107ui8,222ui8,16ui8,75ui8,186ui8,65ui8,75ui8,79ui8,121ui8,252ui8,250ui8,132ui8,110ui8,107ui8,21ui8,86ui8,35ui8,114ui8,248ui8,101ui8,183ui8,59ui8,35ui8,133ui8,73ui8,30ui8,187ui8,125ui8,15ui8,40ui8,71ui8,130ui8,38ui8,176ui8,16ui8,106ui8,159ui8,178ui8,14ui8,227ui8,46ui8,143ui8,8ui8,150ui8,143ui8,212ui8,38ui8,195ui8,108ui8,63ui8,54ui8,73ui8,237ui8,54ui8,231ui8,95ui8,160ui8,100ui8,226ui8,208ui8,81ui8,241ui8,233ui8,46ui8,168ui8,142ui8,18ui8,30ui8,187ui8,5ui8,135ui8,194ui8,163ui8,56ui8,248ui8,79ui8,208ui8,1ui8,113ui8,43ui8,27ui8,247ui8,159ui8,101ui8,243ui8,200ui8,108ui8,199ui8,205ui8,197ui8,104ui8,177ui8,71ui8,54ui8,137ui8,107ui8,204ui8,4ui8,193ui8,94ui8,6ui8,217ui8,218ui8,232ui8,207ui8,171ui8,200ui8,201ui8,111ui8,187ui8,95ui8,107ui8,149ui8,78ui8,145ui8,31ui8,108ui8,180ui8,208ui8,211ui8,130ui8,145ui8,186ui8,183ui8,120ui8,13ui8,52ui8,137ui8,159ui8,30ui8,174ui8,0ui8,7ui8,153ui8,38ui8,133ui8,21ui8,140ui8,60ui8,126ui8,190ui8,20ui8,243ui8,106ui8,54ui8,115ui8,26ui8,171ui8,15ui8,111ui8,69ui8,80ui8,226ui8,118ui8,120ui8,2ui8,73ui8,142ui8,171ui8,30ui8,5ui8,136ui8,133ui8,154ui8,74ui8,246ui8,216ui8,124ui8,192ui8,155ui8,233ui8,59ui8,133ui8,17ui8,249ui8,219ui8,103ui8,107ui8,95ui8,65ui8,8ui8,244ui8,40ui8,234ui8,12ui8,12ui8,80ui8,248ui8,89ui8,213ui8,63ui8,33ui8,50ui8,234ui8,52ui8,236ui8,191ui8,60ui8,58ui8,237ui8,249ui8,6ui8,218ui8,254ui8,79ui8,136ui8,147ui8,180ui8,58ui8,63ui8,72ui8,24ui8,191ui8,117ui8,30ui8,216ui8,152ui8,127ui8,160ui8,148ui8,25ui8,0ui8,21ui8,127ui8,125ui8,186ui8,23ui8,37ui8,38ui8,99ui8,210ui8,26ui8,173ui8,113ui8,47ui8,166ui8,181ui8,92ui8,156ui8,80ui8,217ui8,138ui8,141ui8,64ui8,80ui8,104ui8,36ui8,135ui8,84ui8,250ui8,216ui8,223ui8,171ui8 };
            CryptoPP::Integer i_n{ &vec_n[0], vec_n.size(), CryptoPP::Integer::Signedness::UNSIGNED };
            std::vector<uint8_t> vec_e{ 17ui8 };
            CryptoPP::Integer i_e{ &vec_e[0], vec_e.size(), CryptoPP::Integer::Signedness::UNSIGNED };
            std::vector<uint8_t> vec_d{ 56ui8,17ui8,239ui8,119ui8,43ui8,157ui8,246ui8,252ui8,104ui8,77ui8,186ui8,67ui8,92ui8,97ui8,55ui8,147ui8,195ui8,64ui8,6ui8,178ui8,131ui8,96ui8,72ui8,238ui8,34ui8,255ui8,58ui8,67ui8,82ui8,79ui8,34ui8,170ui8,181ui8,89ui8,255ui8,115ui8,25ui8,204ui8,20ui8,16ui8,195ui8,130ui8,226ui8,89ui8,252ui8,48ui8,245ui8,194ui8,61ui8,169ui8,96ui8,140ui8,45ui8,134ui8,117ui8,2ui8,95ui8,156ui8,206ui8,46ui8,105ui8,33ui8,144ui8,191ui8,122ui8,185ui8,120ui8,132ui8,114ui8,216ui8,127ui8,53ui8,146ui8,162ui8,5ui8,24ui8,2ui8,147ui8,79ui8,182ui8,139ui8,203ui8,2ui8,152ui8,176ui8,198ui8,119ui8,240ui8,87ui8,207ui8,92ui8,1ui8,142ui8,82ui8,121ui8,254ui8,16ui8,226ui8,64ui8,123ui8,217ui8,57ui8,94ui8,187ui8,200ui8,244ui8,232ui8,155ui8,116ui8,166ui8,73ui8,166ui8,127ui8,122ui8,203ui8,32ui8,172ui8,195ui8,127ui8,71ui8,240ui8,87ui8,101ui8,223ui8,127ui8,23ui8,93ui8,99ui8,125ui8,228ui8,109ui8,19ui8,214ui8,231ui8,39ui8,143ui8,21ui8,31ui8,229ui8,1ui8,209ui8,216ui8,148ui8,65ui8,215ui8,89ui8,185ui8,252ui8,104ui8,246ui8,2ui8,202ui8,86ui8,229ui8,216ui8,76ui8,92ui8,196ui8,47ui8,253ui8,95ui8,218ui8,230ui8,87ui8,207ui8,140ui8,215ui8,51ui8,170ui8,140ui8,88ui8,143ui8,16ui8,40ui8,108ui8,242ui8,76ui8,42ui8,168ui8,163ui8,5ui8,100ui8,99ui8,54ui8,40ui8,89ui8,234ui8,59ui8,107ui8,239ui8,7ui8,41ui8,9ui8,38ui8,9ui8,59ui8,114ui8,100ui8,218ui8,241ui8,244ui8,110ui8,188ui8,209ui8,88ui8,109ui8,217ui8,241ui8,188ui8,225ui8,244ui8,11ui8,102ui8,14ui8,219ui8,226ui8,19ui8,78ui8,4ui8,97ui8,6ui8,155ui8,101ui8,24ui8,199ui8,112ui8,128ui8,168ui8,112ui8,228ui8,77ui8,164ui8,101ui8,1ui8,141ui8,186ui8,201ui8,136ui8,31ui8,120ui8,166ui8,107ui8,116ui8,251ui8,7ui8,30ui8,47ui8,65ui8,108ui8,178ui8,148ui8,189ui8,132ui8,12ui8,34ui8,195ui8,48ui8,39ui8,207ui8,129ui8,223ui8,117ui8,160ui8,39ui8,25ui8,98ui8,231ui8,36ui8,112ui8,91ui8,43ui8,133ui8,250ui8,255ui8,36ui8,119ui8,182ui8,236ui8,59ui8,249ui8,97ui8,221ui8,254ui8,90ui8,22ui8,231ui8,246ui8,120ui8,13ui8,58ui8,147ui8,159ui8,98ui8,130ui8,80ui8,242ui8,13ui8,209ui8,190ui8,149ui8,226ui8,107ui8,206ui8,222ui8,162ui8,150ui8,78ui8,193ui8,244ui8,124ui8,125ui8,217ui8,115ui8,49ui8,83ui8,127ui8,145ui8,35ui8,53ui8,5ui8,230ui8,214ui8,23ui8,47ui8,136ui8,68ui8,87ui8,230ui8,3ui8,249ui8,126ui8,198ui8,100ui8,206ui8,91ui8,25ui8,151ui8,225ui8,205ui8,248ui8,6ui8,66ui8,222ui8,250ui8,140ui8,170ui8,64ui8,245ui8,9ui8,168ui8,229ui8,133ui8,81ui8,180ui8,56ui8,18ui8,106ui8,60ui8,8ui8,235ui8,16ui8,130ui8,182ui8,44ui8,93ui8,52ui8,181ui8,124ui8,182ui8,53ui8,8ui8,189ui8,79ui8,147ui8,103ui8,168ui8,217ui8,55ui8,139ui8,133ui8,219ui8,32ui8,184ui8,189ui8 };
            CryptoPP::Integer i_d{ &vec_d[0], vec_d.size(), CryptoPP::Integer::Signedness::UNSIGNED };
            std::vector<uint8_t> vec_p{ 191ui8,241ui8,182ui8,141ui8,13ui8,186ui8,94ui8,48ui8,141ui8,176ui8,65ui8,99ui8,12ui8,205ui8,200ui8,100ui8,70ui8,210ui8,239ui8,163ui8,108ui8,77ui8,216ui8,203ui8,10ui8,94ui8,129ui8,4ui8,244ui8,178ui8,76ui8,166ui8,65ui8,243ui8,204ui8,92ui8,170ui8,24ui8,185ui8,150ui8,154ui8,246ui8,24ui8,94ui8,141ui8,65ui8,110ui8,192ui8,107ui8,31ui8,250ui8,199ui8,226ui8,249ui8,250ui8,238ui8,7ui8,174ui8,24ui8,215ui8,82ui8,239ui8,229ui8,240ui8,77ui8,45ui8,155ui8,111ui8,183ui8,203ui8,89ui8,238ui8,24ui8,185ui8,46ui8,33ui8,112ui8,116ui8,191ui8,12ui8,88ui8,36ui8,10ui8,131ui8,146ui8,246ui8,33ui8,89ui8,211ui8,85ui8,232ui8,230ui8,4ui8,244ui8,18ui8,68ui8,135ui8,74ui8,100ui8,138ui8,81ui8,180ui8,123ui8,98ui8,138ui8,26ui8,146ui8,132ui8,84ui8,68ui8,56ui8,139ui8,76ui8,126ui8,129ui8,157ui8,189ui8,5ui8,145ui8,202ui8,146ui8,72ui8,209ui8,15ui8,0ui8,138ui8,119ui8,145ui8,199ui8,105ui8,43ui8,174ui8,192ui8,106ui8,43ui8,191ui8,4ui8,252ui8,138ui8,30ui8,165ui8,236ui8,127ui8,211ui8,14ui8,64ui8,139ui8,201ui8,71ui8,31ui8,222ui8,114ui8,206ui8,211ui8,57ui8,73ui8,101ui8,53ui8,64ui8,200ui8,34ui8,225ui8,213ui8,147ui8,10ui8,164ui8,196ui8,31ui8,201ui8,107ui8,31ui8,103ui8,186ui8,22ui8,9ui8,75ui8,148ui8,53ui8,0ui8,130ui8,143ui8,12ui8,148ui8,203ui8,69ui8,70ui8,71ui8,39ui8,167ui8,55ui8,120ui8,183ui8 };
            CryptoPP::Integer i_p{ &vec_p[0], vec_p.size(), CryptoPP::Integer::Signedness::UNSIGNED };
            std::vector<uint8_t> vec_q{ 231ui8,36ui8,207ui8,239ui8,100ui8,148ui8,97ui8,158ui8,155ui8,152ui8,127ui8,115ui8,73ui8,98ui8,159ui8,244ui8,231ui8,41ui8,166ui8,62ui8,10ui8,12ui8,89ui8,226ui8,83ui8,215ui8,80ui8,133ui8,165ui8,4ui8,160ui8,130ui8,233ui8,57ui8,227ui8,56ui8,44ui8,68ui8,17ui8,139ui8,99ui8,200ui8,189ui8,71ui8,12ui8,180ui8,16ui8,174ui8,194ui8,57ui8,30ui8,127ui8,178ui8,174ui8,53ui8,87ui8,93ui8,41ui8,76ui8,4ui8,96ui8,211ui8,218ui8,114ui8,66ui8,116ui8,155ui8,88ui8,40ui8,142ui8,89ui8,253ui8,189ui8,152ui8,187ui8,15ui8,29ui8,150ui8,173ui8,135ui8,250ui8,210ui8,6ui8,64ui8,217ui8,74ui8,91ui8,248ui8,155ui8,251ui8,109ui8,20ui8,135ui8,206ui8,60ui8,6ui8,82ui8,218ui8,55ui8,2ui8,239ui8,15ui8,199ui8,159ui8,42ui8,193ui8,64ui8,15ui8,232ui8,227ui8,108ui8,73ui8,160ui8,100ui8,241ui8,253ui8,209ui8,240ui8,42ui8,65ui8,44ui8,94ui8,232ui8,91ui8,121ui8,182ui8,197ui8,158ui8,138ui8,40ui8,243ui8,171ui8,109ui8,84ui8,154ui8,10ui8,182ui8,152ui8,80ui8,93ui8,227ui8,135ui8,240ui8,138ui8,118ui8,83ui8,101ui8,253ui8,252ui8,19ui8,183ui8,163ui8,80ui8,154ui8,121ui8,112ui8,252ui8,143ui8,211ui8,180ui8,201ui8,99ui8,182ui8,201ui8,9ui8,254ui8,162ui8,141ui8,33ui8,141ui8,37ui8,72ui8,57ui8,235ui8,15ui8,92ui8,172ui8,125ui8,146ui8,106ui8,238ui8,68ui8,176ui8,239ui8,154ui8,190ui8,51ui8,213ui8,104ui8,130ui8,20ui8,173ui8 };
            CryptoPP::Integer i_q{ &vec_q[0], vec_q.size(), CryptoPP::Integer::Signedness::UNSIGNED };
            std::vector<uint8_t> vec_dp{ 101ui8,158ui8,21ui8,89ui8,187ui8,249ui8,64ui8,236ui8,135ui8,63ui8,49ui8,172ui8,232ui8,169ui8,45ui8,218ui8,188ui8,21ui8,81ui8,176ui8,222ui8,252ui8,9ui8,92ui8,110ui8,230ui8,188ui8,198ui8,99ui8,109ui8,115ui8,223ui8,140ui8,83ui8,228ui8,169ui8,135ui8,58ui8,68ui8,34ui8,142ui8,70ui8,12ui8,230ui8,195ui8,64ui8,194ui8,41ui8,162ui8,31ui8,253ui8,60ui8,165ui8,87ui8,42ui8,126ui8,4ui8,16ui8,223ui8,249ui8,134ui8,66ui8,197ui8,6ui8,191ui8,114ui8,127ui8,119ui8,97ui8,77ui8,137ui8,246ui8,133ui8,143ui8,54ui8,138ui8,44ui8,122ui8,10ui8,202ui8,76ui8,199ui8,201ui8,84ui8,183ui8,55ui8,2ui8,152ui8,247ui8,105ui8,183ui8,136ui8,213ui8,114ui8,39ui8,201ui8,237ui8,69ui8,128ui8,133ui8,118ui8,140ui8,185ui8,202ui8,193ui8,149ui8,152ui8,220ui8,165ui8,21ui8,14ui8,224ui8,85ui8,172ui8,98ui8,188ui8,235ui8,153ui8,137ui8,107ui8,62ui8,98ui8,201ui8,7ui8,241ui8,58ui8,63ui8,77ui8,45ui8,85ui8,203ui8,212ui8,252ui8,116ui8,113ui8,131ui8,62ui8,224ui8,12ui8,227ui8,12ui8,140ui8,67ui8,171ui8,248ui8,124ui8,134ui8,61ui8,97ui8,227ui8,178ui8,0ui8,139ui8,157ui8,0ui8,53ui8,234ui8,73ui8,94ui8,136ui8,18ui8,119ui8,143ui8,47ui8,186ui8,87ui8,58ui8,167ui8,106ui8,162ui8,31ui8,175ui8,98ui8,132ui8,35ui8,9ui8,229ui8,13ui8,0ui8,69ui8,30ui8,142ui8,48ui8,167ui8,217ui8,97ui8,112ui8,246ui8,224ui8,14ui8,78ui8,247ui8 };
            CryptoPP::Integer i_dp{ &vec_dp[0], vec_dp.size(), CryptoPP::Integer::Signedness::UNSIGNED };
            std::vector<uint8_t> vec_dq{ 81ui8,148ui8,133ui8,159ui8,201ui8,37ui8,79ui8,161ui8,100ui8,23ui8,180ui8,131ui8,10ui8,215ui8,131ui8,191ui8,217ui8,29ui8,194ui8,52ui8,3ui8,139ui8,227ui8,125ui8,14ui8,136ui8,58ui8,137ui8,133ui8,137ui8,41ui8,151ui8,157ui8,155ui8,245ui8,215ui8,151ui8,39ui8,21ui8,64ui8,65ui8,85ui8,232ui8,115ui8,109ui8,229ui8,51ui8,16ui8,128ui8,200ui8,221ui8,150ui8,123ui8,76ui8,139ui8,76ui8,2ui8,195ui8,72ui8,1ui8,139ui8,150ui8,16ui8,221ui8,8ui8,101ui8,100ui8,0ui8,255ui8,65ui8,76ui8,240ui8,36ui8,204ui8,126ui8,65ui8,145ui8,248ui8,241ui8,243ui8,193ui8,239ui8,197ui8,248ui8,197ui8,41ui8,77ui8,163ui8,9ui8,224ui8,68ui8,157ui8,213ui8,148ui8,21ui8,47ui8,104ui8,137ui8,64ui8,151ui8,159ui8,171ui8,55ui8,101ui8,90ui8,98ui8,82ui8,216ui8,112ui8,80ui8,68ui8,86ui8,56ui8,156ui8,25ui8,44ui8,104ui8,54ui8,165ui8,128ui8,106ui8,3ui8,97ui8,17ui8,58ui8,4ui8,69ui8,191ui8,124ui8,14ui8,116ui8,30ui8,98ui8,210ui8,144ui8,184ui8,124ui8,174ui8,58ui8,123ui8,125ui8,123ui8,69ui8,214ui8,132ui8,29ui8,111ui8,74ui8,149ui8,52ui8,34ui8,178ui8,28ui8,114ui8,193ui8,115ui8,43ui8,246ui8,134ui8,244ui8,131ui8,80ui8,94ui8,161ui8,78ui8,210ui8,87ui8,125ui8,26ui8,230ui8,133ui8,161ui8,5ui8,98ui8,5ui8,108ui8,0ui8,164ui8,202ui8,67ui8,219ui8,159ui8,197ui8,250ui8,54ui8,157ui8,123ui8,180ui8,187ui8,121ui8,52ui8,121ui8 };
            CryptoPP::Integer i_dq{ &vec_dq[0], vec_dq.size(), CryptoPP::Integer::Signedness::UNSIGNED };
            std::vector<uint8_t> vec_u{ 114ui8,53ui8,54ui8,66ui8,201ui8,206ui8,160ui8,83ui8,220ui8,219ui8,18ui8,216ui8,86ui8,5ui8,47ui8,29ui8,80ui8,136ui8,46ui8,245ui8,60ui8,31ui8,180ui8,234ui8,151ui8,38ui8,18ui8,52ui8,179ui8,151ui8,64ui8,189ui8,47ui8,169ui8,23ui8,165ui8,169ui8,113ui8,84ui8,237ui8,2ui8,142ui8,220ui8,51ui8,218ui8,169ui8,194ui8,226ui8,234ui8,163ui8,7ui8,63ui8,17ui8,146ui8,180ui8,8ui8,22ui8,8ui8,56ui8,16ui8,46ui8,100ui8,166ui8,153ui8,5ui8,156ui8,131ui8,181ui8,147ui8,13ui8,151ui8,194ui8,133ui8,223ui8,172ui8,94ui8,219ui8,202ui8,142ui8,81ui8,107ui8,33ui8,54ui8,248ui8,179ui8,229ui8,240ui8,177ui8,226ui8,244ui8,38ui8,6ui8,182ui8,29ui8,66ui8,66ui8,63ui8,71ui8,226ui8,76ui8,220ui8,151ui8,237ui8,230ui8,77ui8,184ui8,122ui8,76ui8,227ui8,41ui8,144ui8,249ui8,209ui8,224ui8,119ui8,36ui8,209ui8,15ui8,40ui8,122ui8,177ui8,8ui8,136ui8,255ui8,64ui8,149ui8,137ui8,47ui8,134ui8,219ui8,123ui8,243ui8,90ui8,112ui8,214ui8,62ui8,74ui8,215ui8,37ui8,200ui8,205ui8,117ui8,246ui8,37ui8,149ui8,29ui8,204ui8,104ui8,232ui8,49ui8,199ui8,33ui8,29ui8,180ui8,145ui8,243ui8,222ui8,132ui8,204ui8,113ui8,19ui8,239ui8,57ui8,245ui8,26ui8,217ui8,1ui8,217ui8,30ui8,236ui8,142ui8,43ui8,73ui8,149ui8,177ui8,198ui8,226ui8,212ui8,247ui8,240ui8,8ui8,164ui8,45ui8,154ui8,170ui8,45ui8,28ui8,42ui8,96ui8,106ui8,45ui8,98ui8 };
            CryptoPP::Integer i_u{ &vec_u[0], vec_u.size(), CryptoPP::Integer::Signedness::UNSIGNED };
            private_key_1_bis.Initialize(i_n, i_e, i_d, i_p, i_q, i_dp, i_dq, i_u);
            public_key_1_bis.Initialize(i_n, i_e);
        }
        REQUIRE(private_key_1.GetModulus() == private_key_1_bis.GetModulus());
        REQUIRE(private_key_1.GetPublicExponent() == private_key_1_bis.GetPublicExponent());
        REQUIRE(private_key_1.GetPrivateExponent() == private_key_1_bis.GetPrivateExponent());
        REQUIRE(private_key_1.GetPrime1() == private_key_1_bis.GetPrime1());
        REQUIRE(private_key_1.GetPrime2() == private_key_1_bis.GetPrime2());
        REQUIRE(private_key_1.GetModPrime1PrivateExponent() == private_key_1_bis.GetModPrime1PrivateExponent());
        REQUIRE(private_key_1.GetModPrime2PrivateExponent() == private_key_1_bis.GetModPrime2PrivateExponent());
        REQUIRE(private_key_1.GetMultiplicativeInverseOfPrime2ModPrime1() == private_key_1_bis.GetMultiplicativeInverseOfPrime2ModPrime1());


        CryptoPP::RSA::PublicKey public_key_2 = getCryptoppPublicKey(pub);
        CryptoPP::RSA::PrivateKey private_key_2 = getCryptoppPrivateKey(deco_priv_key);

        REQUIRE(private_key_2.GetModulus() == public_key_2.GetModulus());
        REQUIRE(private_key_2.GetPublicExponent() == public_key_2.GetPublicExponent());
        REQUIRE(private_key_2.Validate(rand, 3));
        REQUIRE(public_key_2.Validate(rand, 3));
        CryptoPP::RSA::PrivateKey private_key_2_bis;
        CryptoPP::RSA::PublicKey public_key_2_bis;
        {
            std::vector<uint8_t> vec_n{ 151ui8,83ui8,116ui8,53ui8,188ui8,238ui8,222ui8,0ui8,22ui8,95ui8,241ui8,128ui8,110ui8,49ui8,46ui8,201ui8,156ui8,121ui8,115ui8,145ui8,123ui8,45ui8,150ui8,210ui8,234ui8,215ui8,140ui8,19ui8,236ui8,105ui8,94ui8,130ui8,222ui8,206ui8,169ui8,158ui8,133ui8,104ui8,225ui8,45ui8,136ui8,164ui8,250ui8,204ui8,107ui8,252ui8,203ui8,4ui8,207ui8,84ui8,181ui8,34ui8,220ui8,27ui8,108ui8,228ui8,195ui8,37ui8,233ui8,82ui8,88ui8,134ui8,78ui8,158ui8,135ui8,135ui8,200ui8,178ui8,84ui8,108ui8,112ui8,146ui8,105ui8,245ui8,99ui8,82ui8,28ui8,46ui8,173ui8,201ui8,167ui8,32ui8,39ui8,58ui8,126ui8,106ui8,53ui8,231ui8,76ui8,46ui8,141ui8,83ui8,253ui8,62ui8,146ui8,108ui8,174ui8,74ui8,48ui8,222ui8,5ui8,114ui8,219ui8,118ui8,13ui8,25ui8,45ui8,153ui8,137ui8,138ui8,184ui8,141ui8,215ui8,104ui8,247ui8,122ui8,1ui8,117ui8,16ui8,242ui8,241ui8,71ui8,14ui8,30ui8,121ui8,163ui8,44ui8,215ui8,116ui8,127ui8,250ui8,28ui8,62ui8,107ui8,177ui8,170ui8,211ui8,135ui8,29ui8,12ui8,138ui8,114ui8,141ui8,146ui8,67ui8,86ui8,86ui8,165ui8,87ui8,75ui8,181ui8,183ui8,249ui8,72ui8,21ui8,240ui8,135ui8,47ui8,111ui8,17ui8,43ui8,57ui8,129ui8,20ui8,54ui8,236ui8,227ui8,154ui8,170ui8,134ui8,247ui8,139ui8,225ui8,214ui8,135ui8,29ui8,210ui8,205ui8,213ui8,134ui8,38ui8,126ui8,202ui8,206ui8,95ui8,240ui8,85ui8,96ui8,122ui8,65ui8,7ui8,119ui8,111ui8,29ui8,21ui8,225ui8,124ui8,123ui8,211ui8,97ui8,32ui8,249ui8,24ui8,15ui8,122ui8,122ui8,187ui8,13ui8,22ui8,220ui8,22ui8,209ui8,167ui8,244ui8,209ui8,254ui8,191ui8,191ui8,174ui8,68ui8,153ui8,40ui8,106ui8,176ui8,45ui8,104ui8,129ui8,138ui8,170ui8,219ui8,157ui8,253ui8,31ui8,127ui8,56ui8,179ui8,27ui8,128ui8,228ui8,252ui8,132ui8,94ui8,5ui8,194ui8,55ui8,4ui8,79ui8,199ui8,210ui8,99ui8,251ui8,1ui8,128ui8,247ui8,235ui8,186ui8,101ui8,92ui8,132ui8,235ui8,76ui8,67ui8,64ui8,19ui8,55ui8,182ui8,189ui8,187ui8,74ui8,174ui8,98ui8,83ui8,210ui8,75ui8,97ui8,254ui8,174ui8,169ui8,66ui8,252ui8,42ui8,40ui8,181ui8,131ui8,201ui8,1ui8,215ui8,42ui8,79ui8,239ui8,59ui8,131ui8,152ui8,233ui8,69ui8,96ui8,250ui8,156ui8,80ui8,225ui8,45ui8,106ui8,34ui8,195ui8,107ui8,231ui8,153ui8,222ui8,125ui8,190ui8,196ui8,25ui8,48ui8,21ui8,252ui8,71ui8,171ui8,213ui8,92ui8,210ui8,213ui8,229ui8,8ui8,73ui8,75ui8,244ui8,116ui8,18ui8,158ui8,176ui8,6ui8,151ui8,156ui8,24ui8,19ui8,11ui8,61ui8,10ui8,61ui8,31ui8,92ui8,0ui8,29ui8,73ui8,36ui8,33ui8,95ui8,28ui8,132ui8,122ui8,112ui8,4ui8,234ui8,42ui8,49ui8,163ui8,204ui8,73ui8,205ui8,87ui8,206ui8,147ui8,129ui8,79ui8,0ui8,79ui8,214ui8,241ui8,216ui8,181ui8,177ui8,218ui8,177ui8,39ui8,218ui8,128ui8,205ui8,134ui8,111ui8,4ui8,181ui8,8ui8,197ui8,145ui8 };
            CryptoPP::Integer i_n{ &vec_n[0], vec_n.size(), CryptoPP::Integer::Signedness::UNSIGNED };
            std::vector<uint8_t> vec_e{ 17ui8 };
            CryptoPP::Integer i_e{ &vec_e[0], vec_e.size(), CryptoPP::Integer::Signedness::UNSIGNED };
            std::vector<uint8_t> vec_d{ 2ui8,247ui8,152ui8,221ui8,234ui8,155ui8,69ui8,155ui8,156ui8,11ui8,235ui8,163ui8,37ui8,76ui8,66ui8,44ui8,28ui8,42ui8,137ui8,203ui8,163ui8,10ui8,238ui8,224ui8,255ui8,149ui8,203ui8,135ui8,235ui8,137ui8,152ui8,112ui8,255ui8,89ui8,98ui8,178ui8,203ui8,102ui8,114ui8,216ui8,188ui8,103ui8,160ui8,134ui8,132ui8,160ui8,144ui8,135ui8,159ui8,172ui8,83ui8,221ui8,139ui8,216ui8,97ui8,129ui8,249ui8,201ui8,135ui8,21ui8,177ui8,108ui8,11ui8,148ui8,173ui8,82ui8,249ui8,229ui8,97ui8,7ui8,37ui8,88ui8,52ui8,70ui8,17ui8,1ui8,156ui8,41ui8,18ui8,119ui8,103ui8,171ui8,76ui8,16ui8,52ui8,172ui8,191ui8,205ui8,81ui8,206ui8,183ui8,122ui8,30ui8,16ui8,73ui8,37ui8,68ui8,172ui8,31ui8,19ui8,105ui8,132ui8,195ui8,12ui8,90ui8,156ui8,25ui8,253ui8,253ui8,173ui8,98ui8,253ui8,194ui8,248ui8,4ui8,218ui8,60ui8,67ui8,140ui8,225ui8,160ui8,86ui8,186ui8,0ui8,152ui8,249ui8,41ui8,9ui8,62ui8,133ui8,4ui8,231ui8,116ui8,172ui8,199ui8,63ui8,149ui8,183ui8,90ui8,236ui8,42ui8,223ui8,27ui8,223ui8,187ui8,11ui8,187ui8,108ui8,167ui8,91ui8,214ui8,98ui8,250ui8,217ui8,65ui8,175ui8,98ui8,5ui8,243ui8,30ui8,116ui8,76ui8,107ui8,241ui8,86ui8,105ui8,9ui8,123ui8,128ui8,213ui8,120ui8,78ui8,9ui8,114ui8,163ui8,70ui8,219ui8,249ui8,255ui8,42ui8,201ui8,138ui8,3ui8,250ui8,1ui8,225ui8,147ui8,62ui8,32ui8,131ui8,200ui8,238ui8,59ui8,177ui8,157ui8,98ui8,200ui8,184ui8,43ui8,37ui8,140ui8,253ui8,76ui8,97ui8,219ui8,105ui8,166ui8,89ui8,40ui8,80ui8,250ui8,64ui8,72ui8,78ui8,20ui8,137ui8,35ui8,157ui8,190ui8,207ui8,176ui8,140ui8,82ui8,203ui8,49ui8,88ui8,49ui8,215ui8,93ui8,202ui8,42ui8,97ui8,251ui8,180ui8,217ui8,182ui8,40ui8,115ui8,30ui8,9ui8,51ui8,118ui8,6ui8,95ui8,98ui8,27ui8,185ui8,188ui8,142ui8,130ui8,163ui8,136ui8,159ui8,185ui8,71ui8,164ui8,226ui8,77ui8,42ui8,53ui8,234ui8,159ui8,230ui8,99ui8,97ui8,39ui8,219ui8,90ui8,113ui8,183ui8,241ui8,203ui8,234ui8,180ui8,148ui8,42ui8,214ui8,5ui8,167ui8,221ui8,123ui8,12ui8,89ui8,58ui8,53ui8,25ui8,64ui8,86ui8,210ui8,239ui8,94ui8,199ui8,56ui8,148ui8,232ui8,228ui8,245ui8,166ui8,106ui8,56ui8,54ui8,117ui8,59ui8,120ui8,47ui8,154ui8,239ui8,8ui8,132ui8,253ui8,196ui8,167ui8,29ui8,91ui8,77ui8,150ui8,215ui8,243ui8,186ui8,48ui8,11ui8,84ui8,144ui8,8ui8,196ui8,4ui8,58ui8,162ui8,5ui8,158ui8,51ui8,135ui8,179ui8,188ui8,6ui8,47ui8,186ui8,240ui8,119ui8,141ui8,61ui8,148ui8,136ui8,26ui8,159ui8,154ui8,174ui8,103ui8,162ui8,148ui8,49ui8,251ui8,15ui8,84ui8,127ui8,117ui8,182ui8,99ui8,2ui8,160ui8,141ui8,160ui8,86ui8,240ui8,161ui8,67ui8,7ui8,193ui8,149ui8,95ui8,116ui8,200ui8,63ui8,246ui8,173ui8,29ui8,225ui8,243ui8,57ui8,65ui8,65ui8,100ui8,185ui8,193ui8 };
            CryptoPP::Integer i_d{ &vec_d[0], vec_d.size(), CryptoPP::Integer::Signedness::UNSIGNED };
            std::vector<uint8_t> vec_p{ 182ui8,193ui8,226ui8,119ui8,244ui8,249ui8,177ui8,196ui8,198ui8,178ui8,29ui8,9ui8,89ui8,159ui8,199ui8,45ui8,247ui8,149ui8,65ui8,13ui8,137ui8,160ui8,172ui8,80ui8,174ui8,133ui8,99ui8,157ui8,94ui8,224ui8,148ui8,166ui8,39ui8,214ui8,33ui8,9ui8,58ui8,100ui8,110ui8,10ui8,90ui8,228ui8,126ui8,23ui8,219ui8,91ui8,159ui8,159ui8,66ui8,128ui8,138ui8,147ui8,22ui8,163ui8,247ui8,226ui8,48ui8,82ui8,79ui8,184ui8,137ui8,25ui8,152ui8,92ui8,140ui8,189ui8,85ui8,81ui8,139ui8,85ui8,7ui8,253ui8,203ui8,137ui8,77ui8,194ui8,153ui8,191ui8,160ui8,170ui8,249ui8,164ui8,114ui8,32ui8,2ui8,178ui8,174ui8,177ui8,197ui8,12ui8,243ui8,122ui8,214ui8,29ui8,41ui8,240ui8,23ui8,58ui8,11ui8,181ui8,214ui8,84ui8,252ui8,40ui8,204ui8,11ui8,246ui8,199ui8,219ui8,5ui8,250ui8,161ui8,225ui8,207ui8,236ui8,132ui8,227ui8,236ui8,56ui8,198ui8,231ui8,210ui8,224ui8,157ui8,127ui8,40ui8,50ui8,59ui8,66ui8,120ui8,91ui8,64ui8,176ui8,122ui8,244ui8,244ui8,50ui8,249ui8,94ui8,252ui8,140ui8,135ui8,206ui8,110ui8,173ui8,101ui8,0ui8,82ui8,155ui8,28ui8,154ui8,198ui8,77ui8,113ui8,62ui8,162ui8,167ui8,4ui8,184ui8,155ui8,117ui8,52ui8,217ui8,57ui8,117ui8,52ui8,82ui8,191ui8,43ui8,113ui8,22ui8,185ui8,197ui8,35ui8,27ui8,83ui8,113ui8,225ui8,30ui8,165ui8,227ui8,252ui8,101ui8,57ui8,148ui8,243ui8,71ui8,117ui8,172ui8,1ui8,151ui8,61ui8 };
            CryptoPP::Integer i_p{ &vec_p[0], vec_p.size(), CryptoPP::Integer::Signedness::UNSIGNED };
            std::vector<uint8_t> vec_q{ 211ui8,248ui8,216ui8,187ui8,138ui8,209ui8,137ui8,33ui8,67ui8,208ui8,195ui8,135ui8,106ui8,206ui8,208ui8,28ui8,23ui8,36ui8,250ui8,245ui8,182ui8,198ui8,14ui8,91ui8,248ui8,205ui8,71ui8,71ui8,14ui8,83ui8,87ui8,143ui8,49ui8,0ui8,114ui8,153ui8,193ui8,48ui8,190ui8,109ui8,159ui8,147ui8,91ui8,81ui8,49ui8,54ui8,73ui8,136ui8,1ui8,90ui8,54ui8,46ui8,148ui8,218ui8,87ui8,85ui8,62ui8,11ui8,23ui8,17ui8,37ui8,245ui8,13ui8,132ui8,195ui8,63ui8,198ui8,220ui8,3ui8,19ui8,82ui8,73ui8,17ui8,60ui8,188ui8,244ui8,9ui8,73ui8,150ui8,9ui8,22ui8,173ui8,107ui8,86ui8,8ui8,214ui8,35ui8,42ui8,225ui8,165ui8,251ui8,112ui8,94ui8,220ui8,219ui8,238ui8,51ui8,5ui8,78ui8,29ui8,124ui8,233ui8,227ui8,155ui8,62ui8,105ui8,48ui8,230ui8,121ui8,9ui8,79ui8,48ui8,14ui8,58ui8,14ui8,167ui8,27ui8,68ui8,94ui8,7ui8,111ui8,18ui8,166ui8,157ui8,39ui8,31ui8,19ui8,5ui8,81ui8,147ui8,251ui8,73ui8,142ui8,161ui8,208ui8,215ui8,77ui8,50ui8,99ui8,146ui8,65ui8,27ui8,9ui8,26ui8,81ui8,189ui8,107ui8,169ui8,124ui8,76ui8,101ui8,53ui8,10ui8,223ui8,97ui8,212ui8,121ui8,239ui8,194ui8,101ui8,103ui8,31ui8,243ui8,247ui8,1ui8,91ui8,244ui8,156ui8,108ui8,49ui8,24ui8,165ui8,26ui8,210ui8,48ui8,13ui8,164ui8,208ui8,79ui8,80ui8,15ui8,6ui8,248ui8,83ui8,53ui8,30ui8,191ui8,143ui8,1ui8,246ui8,44ui8,229ui8 };
            CryptoPP::Integer i_q{ &vec_q[0], vec_q.size(), CryptoPP::Integer::Signedness::UNSIGNED };
            std::vector<uint8_t> vec_dp{ 21ui8,128ui8,56ui8,194ui8,209ui8,134ui8,201ui8,158ui8,173ui8,246ui8,214ui8,61ui8,85ui8,214ui8,143ui8,231ui8,74ui8,77ui8,203ui8,107ui8,1ui8,33ui8,246ui8,39ui8,156ui8,15ui8,177ui8,93ui8,206ui8,237ui8,62ui8,170ui8,34ui8,205ui8,229ui8,196ui8,217ui8,177ui8,118ui8,91ui8,146ui8,56ui8,255ui8,198ui8,146ui8,71ui8,3ui8,184ui8,98ui8,45ui8,61ui8,122ui8,183ui8,94ui8,149ui8,162ui8,35ui8,205ui8,114ui8,202ui8,106ui8,123ui8,123ui8,86ui8,46ui8,172ui8,220ui8,220ui8,106ui8,190ui8,181ui8,165ui8,99ui8,61ui8,84ui8,113ui8,63ui8,67ui8,184ui8,140ui8,149ui8,215ui8,28ui8,124ui8,60ui8,141ui8,125ui8,246ui8,203ui8,227ui8,103ui8,240ui8,85ui8,108ui8,215ui8,193ui8,228ui8,157ui8,106ui8,202ui8,25ui8,55ui8,44ui8,185ui8,129ui8,106ui8,209ui8,189ui8,40ui8,211ui8,134ui8,229ui8,222ui8,84ui8,178ui8,105ui8,252ui8,178ui8,97ui8,8ui8,87ui8,130ui8,56ui8,138ui8,255ui8,230ui8,156ui8,127ui8,113ui8,59ui8,86ui8,7ui8,156ui8,74ui8,179ui8,104ui8,5ui8,255ui8,56ui8,89ui8,242ui8,106ui8,84ui8,133ui8,125ui8,207ui8,165ui8,175ui8,93ui8,138ui8,229ui8,8ui8,69ui8,88ui8,157ui8,245ui8,4ui8,151ui8,36ui8,198ui8,254ui8,186ui8,236ui8,97ui8,28ui8,216ui8,250ui8,173ui8,20ui8,43ui8,108ui8,21ui8,218ui8,245ui8,18ui8,70ui8,13ui8,101ui8,199ui8,94ui8,207ui8,135ui8,26ui8,247ui8,183ui8,43ui8,174ui8,13ui8,216ui8,0ui8,47ui8,233ui8 };
            CryptoPP::Integer i_dp{ &vec_dp[0], vec_dp.size(), CryptoPP::Integer::Signedness::UNSIGNED };
            std::vector<uint8_t> vec_dq{ 174ui8,144ui8,178ui8,124ui8,84ui8,52ui8,22ui8,147ui8,221ui8,126ui8,191ui8,36ui8,57ui8,215ui8,126ui8,53ui8,64ui8,60ui8,146ui8,111ui8,255ui8,238ui8,102ui8,45ui8,159ui8,184ui8,28ui8,148ui8,222ui8,158ui8,252ui8,208ui8,70ui8,120ui8,214ui8,216ui8,249ui8,115ui8,111ui8,165ui8,146ui8,121ui8,90ui8,66ui8,221ui8,59ui8,196ui8,21ui8,166ui8,194ui8,195ui8,53ui8,107ui8,134ui8,162ui8,70ui8,51ui8,24ui8,49ui8,29ui8,46ui8,81ui8,86ui8,109ui8,85ui8,127ui8,208ui8,241ui8,107ui8,241ui8,203ui8,75ui8,59ui8,95ui8,50ui8,50ui8,98ui8,0ui8,93ui8,112ui8,229ui8,127ui8,193ui8,206ui8,97ui8,161ui8,74ui8,35ui8,80ui8,106ui8,146ui8,213ui8,2ui8,212ui8,0ui8,105ui8,207ui8,170ui8,4ui8,24ui8,72ui8,192ui8,157ui8,82ui8,171ui8,222ui8,40ui8,69ui8,84ui8,158ui8,65ui8,54ui8,162ui8,77ui8,237ui8,243ui8,7ui8,101ui8,122ui8,156ui8,181ui8,211ui8,31ui8,204ui8,182ui8,206ui8,75ui8,230ui8,67ui8,46ui8,146ui8,181ui8,12ui8,12ui8,202ui8,26ui8,184ui8,11ui8,97ui8,15ui8,8ui8,112ui8,158ui8,21ui8,172ui8,186ui8,28ui8,109ui8,117ui8,108ui8,23ui8,28ui8,159ui8,138ui8,201ui8,9ui8,85ui8,92ui8,9ui8,128ui8,175ui8,71ui8,125ui8,158ui8,61ui8,90ui8,201ui8,113ui8,194ui8,130ui8,201ui8,0ui8,112ui8,112ui8,220ui8,71ui8,120ui8,171ui8,140ui8,156ui8,72ui8,156ui8,84ui8,8ui8,73ui8,221ui8,22ui8,57ui8,137ui8,37ui8,21ui8,233ui8 };
            CryptoPP::Integer i_dq{ &vec_dq[0], vec_dq.size(), CryptoPP::Integer::Signedness::UNSIGNED };
            std::vector<uint8_t> vec_u{ 68ui8,74ui8,191ui8,162ui8,94ui8,104ui8,222ui8,220ui8,113ui8,47ui8,200ui8,47ui8,175ui8,1ui8,90ui8,38ui8,73ui8,83ui8,31ui8,240ui8,132ui8,69ui8,75ui8,2ui8,31ui8,160ui8,118ui8,201ui8,76ui8,156ui8,229ui8,23ui8,152ui8,15ui8,11ui8,216ui8,61ui8,197ui8,26ui8,67ui8,48ui8,68ui8,210ui8,117ui8,182ui8,46ui8,34ui8,31ui8,108ui8,57ui8,226ui8,179ui8,241ui8,16ui8,62ui8,191ui8,53ui8,53ui8,211ui8,105ui8,199ui8,52ui8,189ui8,233ui8,98ui8,184ui8,248ui8,58ui8,93ui8,223ui8,107ui8,13ui8,56ui8,217ui8,112ui8,102ui8,1ui8,168ui8,140ui8,162ui8,125ui8,18ui8,6ui8,86ui8,152ui8,245ui8,212ui8,169ui8,170ui8,34ui8,180ui8,215ui8,151ui8,44ui8,160ui8,88ui8,78ui8,92ui8,203ui8,192ui8,166ui8,216ui8,36ui8,181ui8,146ui8,76ui8,210ui8,57ui8,75ui8,181ui8,182ui8,141ui8,146ui8,239ui8,74ui8,103ui8,16ui8,62ui8,59ui8,243ui8,145ui8,106ui8,214ui8,79ui8,29ui8,147ui8,103ui8,162ui8,130ui8,245ui8,82ui8,6ui8,170ui8,186ui8,133ui8,29ui8,152ui8,131ui8,160ui8,213ui8,58ui8,245ui8,103ui8,245ui8,100ui8,85ui8,142ui8,29ui8,215ui8,26ui8,65ui8,176ui8,9ui8,1ui8,137ui8,181ui8,247ui8,240ui8,72ui8,5ui8,27ui8,140ui8,159ui8,243ui8,147ui8,148ui8,188ui8,59ui8,165ui8,125ui8,208ui8,42ui8,137ui8,46ui8,174ui8,124ui8,53ui8,127ui8,36ui8,155ui8,225ui8,66ui8,152ui8,37ui8,113ui8,80ui8,83ui8,211ui8,222ui8,214ui8,225ui8,60ui8 };
            CryptoPP::Integer i_u{ &vec_u[0], vec_u.size(), CryptoPP::Integer::Signedness::UNSIGNED };
            private_key_2_bis.Initialize(i_n, i_e, i_d, i_p, i_q, i_dp, i_dq, i_u);
            public_key_2_bis.Initialize(i_n, i_e);
        }
        //try to recreate the signing/unsigning
        IdentityManager mana1{ 1 };
        mana1.m_public_key.type = IdentityManager::EncryptionType::RSA;
        mana1.m_public_key.raw_data = deco_pub_key;
        mana1.m_private_key = priv;
        IdentityManager mana2{ 2 };
        mana2.m_public_key.type = IdentityManager::EncryptionType::RSA;
        mana2.m_public_key.raw_data = pub;
        mana2.m_private_key = deco_priv_key;
        std::vector<uint8_t> temp_buff = clear_msg;

        //external data test: sign
        std::cout << "raw data test: sign only\n";
        for (int ouij = 0; ouij < 100; ouij++) {
            std::cout << ".";
            VecB data_in{ 8ui8, 52ui8, 55ui8,49ui8,101ui8,53ui8,102ui8,53ui8,98ui8 };
            VecB data_sign = cryptopp_sign(data_in, private_key_1_bis);
            VecB data_unsigned = cryptopp_unsign(data_sign, public_key_1_bis);
            REQUIRE(!data_unsigned.empty());
            REQUIRE(data_unsigned == data_in);
        }
        std::cout << " OK\n\n";
        std::cout << "raw data test: crypt only\n";
        for (int ouij = 0; ouij < 100; ouij++) {
            std::cout << ".";
            VecB data_in{ 8ui8, 52ui8, 55ui8,49ui8,101ui8,53ui8,102ui8,53ui8,98ui8 };
            VecB data_crypt = cryptopp_encrypt(data_in, public_key_2_bis);
            VecB data_decrypted = cryptopp_decrypt(data_crypt, private_key_2_bis);
            REQUIRE(!data_decrypted.empty());
            REQUIRE(data_decrypted == data_in);
        }
        std::cout << " OK\n\n";
        std::cout << "raw data test: sign & crypt two times\n";
        for (int ouij = 0; ouij < 100; ouij++) {
            std::cout << ".";
            VecB data_in{ 52ui8, 55ui8,49ui8,101ui8,53ui8,102ui8,53ui8,98ui8 };
            VecB data_sign = cryptopp_sign(data_in, private_key_1_bis);
            VecB data_crypt_1 = cryptopp_encrypt(VecB{ data_sign.begin(), data_sign.begin() + data_sign.size() / 2 }, public_key_2_bis);
            VecB data_crypt_2 = cryptopp_encrypt(VecB{ data_sign.begin() + data_sign.size() / 2, data_sign.end() }, public_key_2_bis);
            VecB data_decrypted_1 = cryptopp_decrypt(data_crypt_1, private_key_2_bis);
            VecB data_decrypted_2 = cryptopp_decrypt(data_crypt_2, private_key_2_bis);
            REQUIRE(!data_decrypted_1.empty());
            REQUIRE(data_decrypted_1 == VecB{ data_sign.begin(), data_sign.begin() + data_sign.size() / 2 });
            REQUIRE(!data_decrypted_2.empty());
            REQUIRE(data_decrypted_2 == VecB{ data_sign.begin() + data_sign.size() / 2, data_sign.end() });
            VecB data_decrypted = data_decrypted_1;
            data_decrypted.insert(data_decrypted.end(), data_decrypted_2.begin(), data_decrypted_2.end());
            REQUIRE(data_decrypted == data_sign);
            VecB data_unsigned = cryptopp_unsign(data_decrypted, public_key_1_bis);
            REQUIRE(!data_unsigned.empty());
            REQUIRE(data_unsigned == data_in);
        }
        std::cout << " OK\n\n";

        //external data test
        {
            std::cout << " try with another message\n";
            uint64_t test_msg = rand_u8() | (rand_u8() << 8) | (rand_u8() << 16) | (rand_u8() << 24);
            std::stringstream stream;
            stream << std::hex << test_msg;
            std::string str_input = stream.str();
            ByteBuff buff_in;
            buff_in.putUTF8(str_input).flip();
            std::vector<uint8_t> data_in = buff_in.getAll();


            std::vector<uint8_t> data = data_in;
            mana1.encrypt(data, mana2.m_public_key);

            std::cout << "str_input=" << str_input << " => " << data_in.size() << " ";
            for (uint8_t b : data_in) {
                std::cout << "," << (uint16_t(b));
            }
            std::cout << "\nencoded=" << data.size() << " ";
            for (uint8_t b : data) {
                std::cout << "_" << (uint16_t(b));
            }
            std::cout << "\n";

            bool result = mana2.decrypt(data, mana1.m_public_key);
            std::cout << "\ndecoded=" << data.size() << " ";
            for (uint8_t b : data) {
                std::cout << "_" << (uint16_t(b));
            }
            std::cout << "\n";
            REQUIRE(result);

            REQUIRE(data == data_in);
        }
        //external data test
        std::cout << "\ntry with prob message\n";
        for (int ouij = 0; ouij < 100; ouij++) {
            std::cout << ".";
            ByteBuff buff_in;
            VecB prob_data{ 52ui8, 55ui8,49ui8,101ui8,53ui8,102ui8,53ui8,98ui8 };
            buff_in.putSize(8).put(prob_data).flip();
            std::vector<uint8_t> data_in = buff_in.getAll();
            std::vector<uint8_t> data = data_in;
            mana1.encrypt(data, mana2.m_public_key);
            bool result = mana2.decrypt(data, mana1.m_public_key);
            REQUIRE(result);

            REQUIRE(data == data_in);
        }

        //replay
        std::cout << "\n100 try with the problematic message\n";
        int nbsuccess = 0;
        int nbfail = 0;
        for (int ouj = 0; ouj < 100; ouj++) {
            std::cout << ".";
            temp_buff = clear_msg;
            mana1.encrypt(temp_buff, mana2.m_public_key);
            bool ok = (mana2.decrypt(temp_buff, mana1.m_public_key));
            ok = ok && (temp_buff == clear_msg);
            if (ok) nbsuccess++; else nbfail++;
        }
        std::cout << "nbsuccess=" << nbsuccess << "\nnbfails:" << nbfail << "\n";

        std::cout << "\ntry 10 encode&sign\n";
        for (int ij = 0; ij < 10; ij++) {

            //Error, message:
            std::vector<uint8_t> clear_msg = { 0ui8,176ui8,0ui8,215ui8,16ui8,53ui8,101ui8,98ui8,53ui8,49ui8,97ui8,53ui8,51ui8,57ui8,53ui8,97ui8,55ui8,51ui8,49ui8,50ui8,101ui8,12ui8,112ui8,97ui8,115ui8,115ui8,99ui8,108ui8,117ui8,115ui8,116ui8,101ui8,114ui8,49ui8 };
            //to create this signed message : 
            std::vector<uint8_t> signed_msg = { 157ui8,91ui8,148ui8,138ui8,200ui8,129ui8,156ui8,99ui8,208ui8,250ui8,206ui8,255ui8,162ui8,142ui8,98ui8,164ui8,49ui8,176ui8,102ui8,244ui8,43ui8,158ui8,131ui8,149ui8,233ui8,75ui8,214ui8,162ui8,32ui8,14ui8,1ui8,164ui8,118ui8,199ui8,201ui8,38ui8,191ui8,124ui8,17ui8,199ui8,108ui8,208ui8,180ui8,169ui8,105ui8,59ui8,21ui8,195ui8,185ui8,167ui8,53ui8,247ui8,59ui8,30ui8,154ui8,114ui8,149ui8,239ui8,234ui8,139ui8,0ui8,214ui8,142ui8,75ui8,169ui8,110ui8,223ui8,215ui8,122ui8,24ui8,191ui8,59ui8,169ui8,66ui8,106ui8,8ui8,172ui8,8ui8,227ui8,189ui8,187ui8,15ui8,159ui8,145ui8,191ui8,181ui8,252ui8,152ui8,147ui8,75ui8,159ui8,211ui8,208ui8,127ui8,95ui8,52ui8,158ui8,220ui8,45ui8,230ui8,123ui8,121ui8,199ui8,56ui8,216ui8,253ui8,107ui8,115ui8,80ui8,199ui8,115ui8,238ui8,254ui8,50ui8,23ui8,136ui8,79ui8,24ui8,37ui8,149ui8,222ui8,208ui8,76ui8,255ui8,89ui8,63ui8,254ui8,24ui8,37ui8,41ui8,77ui8,184ui8,105ui8,67ui8,123ui8,77ui8,107ui8,107ui8,188ui8,207ui8,182ui8,91ui8,207ui8,198ui8,217ui8,57ui8,124ui8,19ui8,30ui8,197ui8,193ui8,59ui8,219ui8,144ui8,88ui8,55ui8,7ui8,134ui8,80ui8,11ui8,35ui8,222ui8,224ui8,80ui8,132ui8,76ui8,117ui8,68ui8,80ui8,26ui8,191ui8,246ui8,113ui8,199ui8,230ui8,94ui8,207ui8,17ui8,176ui8,59ui8,126ui8,234ui8,235ui8,57ui8,52ui8,151ui8,137ui8,249ui8,165ui8,215ui8,50ui8,241ui8,57ui8,19ui8,156ui8,192ui8,59ui8,56ui8,207ui8,241ui8,182ui8,91ui8,167ui8,147ui8,54ui8,79ui8,93ui8,76ui8,162ui8,128ui8,113ui8,52ui8,102ui8,212ui8,234ui8,223ui8,121ui8,144ui8,205ui8,115ui8,223ui8,145ui8,244ui8,187ui8,182ui8,1ui8,59ui8,11ui8,66ui8,150ui8,61ui8,137ui8,1ui8,135ui8,241ui8,100ui8,241ui8,39ui8,153ui8,67ui8,95ui8,158ui8,108ui8,48ui8,104ui8,157ui8,12ui8,53ui8,42ui8,176ui8,251ui8,13ui8,64ui8,236ui8,152ui8,58ui8,245ui8,130ui8,237ui8,199ui8,50ui8,73ui8,238ui8,38ui8,30ui8,186ui8,209ui8,153ui8,44ui8,127ui8,206ui8,189ui8,79ui8,16ui8,64ui8,235ui8,164ui8,168ui8,226ui8,185ui8,124ui8,142ui8,152ui8,97ui8,197ui8,200ui8,230ui8,78ui8,83ui8,218ui8,85ui8,129ui8,12ui8,67ui8,22ui8,123ui8,198ui8,196ui8,119ui8,111ui8,174ui8,235ui8,161ui8,177ui8,110ui8,210ui8,153ui8,7ui8,165ui8,37ui8,171ui8,89ui8,103ui8,216ui8,1ui8,246ui8,188ui8,239ui8,107ui8,79ui8,44ui8,115ui8,105ui8,163ui8,189ui8,227ui8,142ui8,180ui8,239ui8,92ui8,73ui8,203ui8,102ui8,183ui8,216ui8,200ui8,135ui8,184ui8,145ui8,73ui8,65ui8,136ui8,25ui8,50ui8,65ui8,92ui8,57ui8,115ui8,184ui8,166ui8,59ui8,210ui8,28ui8,139ui8,226ui8,208ui8,184ui8,192ui8,44ui8,84ui8,111ui8,84ui8,171ui8,82ui8,207ui8,33ui8,108ui8,90ui8,143ui8,234ui8,55ui8,42ui8,230ui8,250ui8,41ui8,194ui8,217ui8,110ui8,182ui8,180ui8,65ui8,23ui8,58ui8,95ui8 };
            //to have this ecrypted message : 
            std::vector<uint8_t> crypt_msg = { 80ui8,232ui8,139ui8,190ui8,200ui8,210ui8,52ui8,241ui8,104ui8,99ui8,117ui8,185ui8,145ui8,61ui8,29ui8,237ui8,147ui8,88ui8,79ui8,24ui8,237ui8,188ui8,223ui8,153ui8,243ui8,115ui8,212ui8,8ui8,43ui8,133ui8,18ui8,69ui8,65ui8,82ui8,118ui8,213ui8,75ui8,212ui8,57ui8,22ui8,140ui8,7ui8,203ui8,84ui8,219ui8,3ui8,135ui8,58ui8,31ui8,116ui8,20ui8,174ui8,216ui8,186ui8,99ui8,134ui8,86ui8,202ui8,117ui8,186ui8,14ui8,110ui8,202ui8,78ui8,53ui8,73ui8,74ui8,71ui8,205ui8,9ui8,64ui8,154ui8,33ui8,245ui8,73ui8,103ui8,141ui8,234ui8,89ui8,138ui8,225ui8,5ui8,75ui8,95ui8,12ui8,48ui8,32ui8,117ui8,69ui8,17ui8,134ui8,0ui8,185ui8,201ui8,125ui8,43ui8,248ui8,87ui8,230ui8,17ui8,163ui8,56ui8,92ui8,27ui8,132ui8,239ui8,28ui8,115ui8,138ui8,58ui8,10ui8,161ui8,229ui8,105ui8,193ui8,38ui8,88ui8,99ui8,85ui8,147ui8,113ui8,204ui8,225ui8,60ui8,63ui8,97ui8,239ui8,174ui8,120ui8,120ui8,242ui8,37ui8,34ui8,123ui8,123ui8,171ui8,51ui8,145ui8,86ui8,234ui8,131ui8,119ui8,98ui8,188ui8,250ui8,58ui8,4ui8,166ui8,194ui8,196ui8,18ui8,254ui8,5ui8,33ui8,128ui8,79ui8,20ui8,174ui8,43ui8,177ui8,224ui8,3ui8,66ui8,85ui8,208ui8,169ui8,69ui8,38ui8,62ui8,4ui8,189ui8,143ui8,49ui8,188ui8,143ui8,169ui8,145ui8,102ui8,143ui8,10ui8,14ui8,133ui8,163ui8,217ui8,14ui8,253ui8,50ui8,165ui8,5ui8,251ui8,121ui8,24ui8,98ui8,21ui8,5ui8,46ui8,166ui8,116ui8,45ui8,117ui8,88ui8,50ui8,225ui8,70ui8,168ui8,188ui8,23ui8,26ui8,117ui8,13ui8,171ui8,64ui8,140ui8,216ui8,173ui8,135ui8,40ui8,192ui8,84ui8,86ui8,151ui8,159ui8,121ui8,145ui8,57ui8,254ui8,245ui8,214ui8,223ui8,73ui8,139ui8,164ui8,130ui8,154ui8,9ui8,208ui8,192ui8,56ui8,24ui8,212ui8,169ui8,254ui8,151ui8,192ui8,74ui8,208ui8,106ui8,244ui8,141ui8,150ui8,108ui8,43ui8,153ui8,73ui8,128ui8,180ui8,62ui8,91ui8,13ui8,51ui8,5ui8,158ui8,114ui8,92ui8,81ui8,67ui8,219ui8,57ui8,4ui8,185ui8,39ui8,177ui8,61ui8,153ui8,119ui8,209ui8,105ui8,195ui8,61ui8,229ui8,135ui8,202ui8,246ui8,56ui8,179ui8,191ui8,231ui8,175ui8,222ui8,174ui8,178ui8,243ui8,44ui8,129ui8,189ui8,160ui8,244ui8,26ui8,16ui8,155ui8,134ui8,141ui8,130ui8,177ui8,171ui8,221ui8,28ui8,35ui8,171ui8,24ui8,141ui8,150ui8,48ui8,5ui8,68ui8,96ui8,9ui8,162ui8,128ui8,22ui8,226ui8,38ui8,80ui8,236ui8,167ui8,104ui8,107ui8,25ui8,41ui8,218ui8,131ui8,83ui8,138ui8,67ui8,201ui8,230ui8,198ui8,94ui8,99ui8,155ui8,25ui8,233ui8,195ui8,52ui8,50ui8,105ui8,193ui8,40ui8,173ui8,131ui8,214ui8,60ui8,15ui8,206ui8,156ui8,195ui8,229ui8,224ui8,145ui8,218ui8,199ui8,227ui8,57ui8,171ui8,141ui8,84ui8,42ui8,113ui8,246ui8,188ui8,142ui8,214ui8,101ui8,56ui8,130ui8,158ui8,202ui8,191ui8,214ui8,136ui8,19ui8,80ui8,170ui8,79ui8 };

            //recreate pub/priv couples
            CryptoPP::RSA::PublicKey public_key_1 = getCryptoppPublicKey(deco_pub_key);
            CryptoPP::RSA::PrivateKey private_key_1 = getCryptoppPrivateKey(priv);

            REQUIRE(private_key_1.GetModulus() == public_key_1.GetModulus());
            REQUIRE(private_key_1.GetPublicExponent() == public_key_1.GetPublicExponent());
            REQUIRE(private_key_1.Validate(rand, 1));
            REQUIRE(public_key_1.Validate(rand, 1));


            CryptoPP::RSA::PublicKey public_key_2 = getCryptoppPublicKey(pub);
            CryptoPP::RSA::PrivateKey private_key_2 = getCryptoppPrivateKey(deco_priv_key);

            REQUIRE(private_key_2.GetModulus() == public_key_2.GetModulus());
            REQUIRE(private_key_2.GetPublicExponent() == public_key_2.GetPublicExponent());
            REQUIRE(private_key_2.Validate(rand, 1));
            REQUIRE(public_key_2.Validate(rand, 1));

            //try to recreate the signing/unsigning
            IdentityManager mana1{ 1 };
            mana1.m_public_key.type = IdentityManager::EncryptionType::RSA;
            mana1.m_public_key.raw_data = deco_pub_key;
            mana1.m_private_key = priv;
            IdentityManager mana2{ 2 };
            mana2.m_public_key.type = IdentityManager::EncryptionType::RSA;
            mana2.m_public_key.raw_data = pub;
            mana2.m_private_key = deco_priv_key;
            std::vector<uint8_t> temp_buff = clear_msg;

            //external data test
            {
                uint64_t test_msg = rand_u8() | (rand_u8() << 8) | (rand_u8() << 16) | (rand_u8() << 24);
                std::stringstream stream;
                stream << std::hex << test_msg;
                std::string str_input = stream.str();
                ByteBuff buff_in;
                buff_in.putUTF8(str_input).flip();
                std::vector<uint8_t> data_in = buff_in.getAll();

                std::vector<uint8_t> data = data_in;
                mana1.encrypt(data, mana2.m_public_key);

                //std::cout << "str_input=" << str_input << " => " << data_in.size() << " ";
                //for (uint8_t b : data_in) {
                //    std::cout << "_" << (uint16_t(b));
                //}
                //std::cout << "\nencoded=" << data.size() << " ";
                //for (uint8_t b : data) {
                //    std::cout << "_" << (uint16_t(b));
                //}
                //std::cout << "\n";

                bool result = mana2.decrypt(data, mana1.m_public_key);
                //std::cout << "\ndecoded=" << data.size() << " ";
                //for (uint8_t b : data) {
                //    std::cout << "_" << (uint16_t(b));
                //}
                REQUIRE(result);

                REQUIRE(data == data_in);
            }

            //replay
            {

                mana1.encrypt(temp_buff, mana2.m_public_key);

                mana2.decrypt(temp_buff, mana1.m_public_key);

                REQUIRE(temp_buff == clear_msg);
            }
        }
    }
}
